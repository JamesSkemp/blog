<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Itunes Playlists To Xml on James Skemp&#39;s Test Hugo-Generated Site</title>
    <link>http://jamesskemp.github.io/words/tags/itunes-playlists-to-xml/</link>
    <description>Recent content in Itunes Playlists To Xml on James Skemp&#39;s Test Hugo-Generated Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Oct 2010 08:35:00 -0500</lastBuildDate>
    <atom:link href="http://jamesskemp.github.io/words/tags/itunes-playlists-to-xml/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>iTunes Playlists to Xml: Parsing categories with LINQ</title>
      <link>http://jamesskemp.github.io/words/posts/iTunes-Playlists-to-Xml-Parsing-categories-with-LINQ/</link>
      <pubDate>Wed, 20 Oct 2010 08:35:00 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/posts/iTunes-Playlists-to-Xml-Parsing-categories-with-LINQ/</guid>
      <description>&lt;p&gt;&lt;p&gt;I recently had the need to determine what types of music I had within my collection of music. Since I&amp;nbsp;created &lt;a rel=&#34;external&#34; href=&#34;http://jamesrskemp.com/apps/iTunesPlaylists2Xml&#34;&gt;iTunes Playlists to Xml&lt;/a&gt; so that I could export out my library on my iPod, it was easy enough to run that and then open &lt;a rel=&#34;external&#34; href=&#34;http://www.linqpad.net/&#34;&gt;LINQPad&lt;/a&gt; to run the following query.&lt;/p&gt;
&lt;p&gt;Obviously, you must export the Genre field in order for the following query to work.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;// Location to the XML from iTunes Playlists to XML
String playlistXml = @&amp;ldquo;C:\Users\James\Projects\services\WcfRestService\App_Data\playlistXml.xml&amp;rdquo;;&lt;/p&gt;

&lt;p&gt;XDocument xml = XDocument.Load(playlistXml);&lt;/p&gt;

&lt;p&gt;var categories = from track in xml.Descendants(&amp;ldquo;track&amp;rdquo;)
    group track by track.Element(&amp;ldquo;genre&amp;rdquo;).Value into t
    orderby t.Key
    //orderby t.Count() descending
    select new {
        Category = t.Key,
        Count = t.Count()
    };&lt;/p&gt;

&lt;p&gt;categories.Dump();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you can switch the orderby lines depending upon how you want to sort the returned data.&lt;/p&gt;
&lt;p&gt;This may be something I eventually build into my application, along with other reporting features. I know that I&amp;rsquo;d love to have some comparision functionality, either built-in or as another application, so that I can see how my music tastes change, or if I&amp;rsquo;m consistent.&lt;/p&gt;
&lt;h3&gt;Sample output&lt;/h3&gt;
&lt;p&gt;With some cleanup, sample output is as follows.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alternative - 279&lt;/li&gt;
&lt;li&gt;Alternative &amp;amp; Punk - 154&lt;/li&gt;
&lt;li&gt;Alternative Rock - 282&lt;/li&gt;
&lt;li&gt;Blues - 120&lt;/li&gt;
&lt;li&gt;Books &amp;amp; Spoken - 145&lt;/li&gt;
&lt;li&gt;Children&amp;rsquo;s Music - 12&lt;/li&gt;
&lt;li&gt;Classical - 255&lt;/li&gt;
&lt;li&gt;Country - 104&lt;/li&gt;
&lt;li&gt;Dance - 76&lt;/li&gt;
&lt;li&gt;Dance &amp;amp; DJ - 220&lt;/li&gt;
&lt;li&gt;Easy Listening - 20&lt;/li&gt;
&lt;li&gt;Electronic - 278&lt;/li&gt;
&lt;li&gt;Electronica/Dance - 91&lt;/li&gt;
&lt;li&gt;Folk - 319&lt;/li&gt;
&lt;li&gt;French Pop - 90&lt;/li&gt;
&lt;li&gt;Gospel &amp;amp; Religious - 18&lt;/li&gt;
&lt;li&gt;Hard Rock &amp;amp; Metal - 6&lt;/li&gt;
&lt;li&gt;Hip Hop/Rap - 88&lt;/li&gt;
&lt;li&gt;Holiday - 18&lt;/li&gt;
&lt;li&gt;House - 4&lt;/li&gt;
&lt;li&gt;Industrial - 107&lt;/li&gt;
&lt;li&gt;Industrial Metal - 17&lt;/li&gt;
&lt;li&gt;Jazz - 30&lt;/li&gt;
&lt;li&gt;J-Pop - 48&lt;/li&gt;
&lt;li&gt;J-Rock - 23&lt;/li&gt;
&lt;li&gt;Lo-Fi - 35&lt;/li&gt;
&lt;li&gt;Metal - 82&lt;/li&gt;
&lt;li&gt;New Age - 270&lt;/li&gt;
&lt;li&gt;Pop - 1225&lt;/li&gt;
&lt;li&gt;Pop/Rock - 26&lt;/li&gt;
&lt;li&gt;R&amp;amp;B - 105&lt;/li&gt;
&lt;li&gt;R&amp;amp;B/Soul - 81&lt;/li&gt;
&lt;li&gt;Reggae - 30&lt;/li&gt;
&lt;li&gt;Rock - 3125&lt;/li&gt;
&lt;li&gt;Soundtrack - 348&lt;/li&gt;
&lt;li&gt;World - 57&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extended iTunes Track class for PHP</title>
      <link>http://jamesskemp.github.io/words/posts/Extended-iTunes-Track-class-for-PHP/</link>
      <pubDate>Sun, 26 Sep 2010 20:15:00 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/posts/Extended-iTunes-Track-class-for-PHP/</guid>
      <description>&lt;p&gt;In a previous article, I had outlined&amp;nbsp;&lt;a href=&#34;http://strivinglife.com/words/post/iTunes-Track-class-in-C-sharp-and-PHP.aspx&#34;&gt;classes in C# and PHP to handle&amp;nbsp;iTunes Playlists to Xml outputs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Having let it sit on the back burner for long enough, I finally went back to the PHP class and finalized the constructor. I also added two functions for sorting.&lt;/p&gt;
&lt;p&gt;Below I have the current code for the class (a &lt;a rel=&#34;external download&#34; href=&#34;http://media.jamesrskemp.com/articles/Track.php.txt&#34;&gt;current version of the Track class for PHP&lt;/a&gt; will always be available elsewhere) and then an example implementation.&lt;/p&gt;
&lt;h3&gt;Track class for PHP, version 1.0&lt;/h3&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
/**
 * Music track object.
 *
 * @author James Skemp - http://jamesrskemp.com
 * @license http://creativecommons.org/licenses/by/3.0/us/
 * @version 1.0
 */
class Track {
    /**
     * How long the track is.
     * @var string
     */
    var $Time;
    /**
     * Name or title of the track.
     * @var string
     */
    var $Name;
    /**
     * Name of the artist.
     * @var string
     */
    var $Artist;
    /**
     * Rating assigned to the track by the playlist&#39;s owner.
     * @var int
     */
    var $Rating;
    /**
     * Number of times the track has been played.
     * @var int
     */
    var $PlayCount;
    /**
     * Date and time the track was last played (and finished).
     */
    var $LastPlayed;
    /**
     * Name of the album the track is from.
     * @var string
     */
    var $Album;
    /**
     * True if the album the track is on is a compilation, false otherwise.
     * @var bool
     */
    var $Compilation;
    /**
     * Order this track is on the album.
     * @var int
     */
    var $TrackNumber;
    /**
     * Total number of tracks on the album.
     * @var int
     */
    var $TrackCount;
    /**
     * The album disc the track is on.
     * @var int
     */
    var $DiscNumber;
    /**
     * Total number of discs in the album.
     * @var int
     */
    var $DiscCount;
    /**
     * Year the track/album was released/published.
     * @var int
     */
    var $Year;
    /**
     * Genre of music the track falls into.
     * @var string
     */
    var $Genre;
    /**
     * Date and time the track was added.
     */
    var $DateAdded;

    public function  __get($name) {
        return $this-&amp;gt;$name;
    }

    public function  __set($name, $value) {
        $this-&amp;gt;$name = $value;
    }

    /**
     * Constructs a Track object from an iTunes Playlists to Xml XML output file.
     *
     * @param object $xml
     */
    function __construct($xml) {
        $this-&amp;gt;Name = (string)$xml-&amp;gt;name;
        $this-&amp;gt;Album = (string)$xml-&amp;gt;album;
        $this-&amp;gt;Artist = (string)$xml-&amp;gt;artist;
        $this-&amp;gt;Time = (string)$xml[&#39;time&#39;];
        $this-&amp;gt;Rating = (int)$xml-&amp;gt;rating;
        $this-&amp;gt;PlayCount = (int)$xml-&amp;gt;playCount;
        $this-&amp;gt;LastPlayed = (string)$xml-&amp;gt;lastPlayed;
        $this-&amp;gt;Compilation = (bool)$xml-&amp;gt;compilation;
        $this-&amp;gt;TrackNumber = (int)$xml-&amp;gt;trackNumber;
        $this-&amp;gt;TrackCount = (int)$xml-&amp;gt;trackCount;
        $this-&amp;gt;DiscNumber = (int)$xml-&amp;gt;discNumber;
        $this-&amp;gt;DiscCount = (int)$xml-&amp;gt;discCount;
        $this-&amp;gt;Year = (int)$xml-&amp;gt;year;
        $this-&amp;gt;Genre = (string)$xml-&amp;gt;genre;
        $this-&amp;gt;DateAdded = (string)$xml-&amp;gt;dateAdded;
    }

    /**
     * Function for sorting Track objects by PlayCount, ascending. Uses LastPlayed for ties.
     *
     * @access public
     * @param Track $x First object to compare.
     * @param Track $y Second object to compare.
     * @return integer Standard sorting returns.
     */
    public function SortPlayCountAsc($x, $y) {
        if ($x-&amp;gt;PlayCount == $y-&amp;gt;PlayCount) {
            if ($x-&amp;gt;LastPlayed == $y-&amp;gt;LastPlayed) {
                return 0;
            } else if ($x-&amp;gt;LastPlayed &amp;lt; $y-&amp;gt;LastPlayed) {
                return -1;
            } else {
                return 1;
            }
        } else if ($x-&amp;gt;PlayCount &amp;lt; $y-&amp;gt;PlayCount) {
            return -1;
        } else {
            return 1;
        }
    }

    /**
     * Function for sorting Track objects by PlayCount, descending. Uses LastPlayed for ties.
     *
     * @access public
     * @param Track $x First object to compare.
     * @param Track $y Second object to compare.
     * @return integer Standard sorting returns.
     */
    public function SortPlayCountDesc($x, $y) {
        if ($x-&amp;gt;PlayCount == $y-&amp;gt;PlayCount) {
            if ($x-&amp;gt;LastPlayed == $y-&amp;gt;LastPlayed) {
                return 0;
            } else if ($x-&amp;gt;LastPlayed &amp;gt; $y-&amp;gt;LastPlayed) {
                return -1;
            } else {
                return 1;
            }
        } else if ($x-&amp;gt;PlayCount &amp;lt; $y-&amp;gt;PlayCount) {
            return 1;
        } else {
            return -1;
        }
    }
}
?&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Usage example&lt;/h3&gt;
&lt;p&gt;Update XML file location as necessary. Note also I&#39;m using the &lt;a rel=&#34;external&#34; href=&#34;http://www.iis.net/download/wincacheforphp&#34;&gt;Windows Cache Extension for PHP&lt;/a&gt;. Modify the initial if statement accordingly if running in an environment that does not have this enabled.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php include_once &#39;Track.php&#39;; ?&amp;gt;
&amp;lt;!DOCTYPE HTML PUBLIC &#34;-//W3C//DTD HTML 4.01 Transitional//EN&#34;&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=UTF-8&#34;&amp;gt;
        &amp;lt;title&amp;gt;Track class example&amp;lt;/title&amp;gt;
        &amp;lt;style type=&#34;text/css&#34;&amp;gt;
            .error {
                color:red;
            }
        &amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;?php
            $tracks = array();

            // Determine if we&#39;ve already grabbed this for the user and either pull or populate their cache.
            if (!wincache_ucache_exists(&#39;tracksData&#39;)) {
                $xml = @simplexml_load_file(&#39;playlistXml-2010-09-25T15-26-50.xml&#39;);

                if (!$xml) {
                    echo &#39;&amp;lt;p class=&#34;error&#34;&amp;gt;Could not load XML data.&amp;lt;/p&amp;gt;&#39;;
                } else {
                    echo &#34;Start creating array of tracks.&amp;lt;br /&amp;gt;&#34;;

                    foreach($xml-&amp;gt;track as $trackXml) {
                        $tracks[] = new Track($trackXml);
                    }
                    unset($trackXml);

                    echo &#34;Finished creating array of tracks.&amp;lt;br /&amp;gt;&#34;;

                    wincache_ucache_set(&#39;tracksData&#39;, $tracks);
                }
                unset($xml);
            } else {
                $tracks = wincache_ucache_get(&#39;tracksData&#39;);
            }

            echo &#34;Count = &#34;.count($tracks).&#34;&amp;lt;br /&amp;gt;&#34;;

            usort($tracks, array(&#39;Track&#39;, &#39;SortPlayCountDesc&#39;));

            echo &#34;&amp;lt;pre&amp;gt;&#34;;
            //var_dump($tracks[2]);
            echo &#34;&amp;lt;/pre&amp;gt;&#34;;

            echo &#34;&amp;lt;pre&amp;gt;&#34;;
            for ($i = 0; $i &amp;lt; 10; $i++) {
                var_dump($tracks[$i]);
            }
            unset($i);

            unset($tracks);
        ?&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Memory usage seems a bit high at the end of this script, but ... at this point I&#39;m not sure what the fix is.&lt;/p&gt;
&lt;p&gt;The fact that PHP doesn&#39;t have an easy way to&amp;nbsp;store data in an&amp;nbsp;application cache (in memory) is rather disappointing, so other than fixing minor bugs, I don&#39;t expect I&#39;ll expand too much on this implementation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iTunes Track class in C# and PHP</title>
      <link>http://jamesskemp.github.io/words/posts/iTunes-Track-class-in-C-sharp-and-PHP/</link>
      <pubDate>Wed, 08 Sep 2010 22:25:00 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/posts/iTunes-Track-class-in-C-sharp-and-PHP/</guid>
      <description>&lt;p&gt;I&#39;ve recently begun reading up on PHP again. As I&#39;m most fond of my iTunes Playlists to Xml application, I thought I&#39;d work with that application&#39;s output - XML files with playlist data - as I continued to dig into PHP (instead of stopping now that I know enough to tweak existing code and create new functionality).&lt;/p&gt;
&lt;p&gt;Here&#39;s a basic Track object in C# and PHP. I&#39;ll of course be elaborating on these as time goes by (and already have code for the C# implementation).&lt;/p&gt;
&lt;h3&gt;Track class in C#&lt;/h3&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;/// &amp;lt;summary&amp;gt;
/// Music track object.
/// &amp;lt;/summary&amp;gt;
public class Track {
    #region Properties
    /// &amp;lt;summary&amp;gt;
    /// How long the track is.
    /// &amp;lt;/summary&amp;gt;
    public String Time { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Name or title of the track.
    /// &amp;lt;/summary&amp;gt;
    public String Name { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Name of the artist.
    /// &amp;lt;/summary&amp;gt;
    public String Artist { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Rating assigned to the track by the playlist&#39;s owner.
    /// &amp;lt;/summary&amp;gt;
    public int Rating { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Number of times the track has been played.
    /// &amp;lt;/summary&amp;gt;
    public int PlayCount { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Date and time the track was last played (and finished).
    /// &amp;lt;/summary&amp;gt;
    public DateTime LastPlayed { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Name of the album the track is from.
    /// &amp;lt;/summary&amp;gt;
    public String Album { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// True if the album the track is on is a compilation, false otherwise.
    /// &amp;lt;/summary&amp;gt;
    public Boolean Compilation { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Order this track is on the album.
    /// &amp;lt;/summary&amp;gt;
    public int TrackNumber { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Total number of tracks on the album.
    /// &amp;lt;/summary&amp;gt;
    public int TrackCount { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// The album disc the track is on.
    /// &amp;lt;/summary&amp;gt;
    public int DiscNumber { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Total number of discs in the album.
    /// &amp;lt;/summary&amp;gt;
    public int DiscCount { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Year the track/album was released/published.
    /// &amp;lt;/summary&amp;gt;
    public int Year { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Genre of music the track falls into.
    /// &amp;lt;/summary&amp;gt;
    public String Genre { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Date and time the track was added.
    /// &amp;lt;/summary&amp;gt;
    public DateTime DateAdded { get; set; }
    #endregion
}&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Track class in PHP&lt;/h3&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
/**
 * Music track object.
 *
 * @author James Skemp
 */
class Track {
    /**
     * How long the track is.
     * @var string
     */
    var $Time;
    /**
     * Name or title of the track.
     * @var string
     */
    var $Name;
    /**
     * Name of the artist.
     * @var string
     */
    var $Artist;
    /**
     * Rating assigned to the track by the playlist&#39;s owner.
     * @var int
     */
    var $Rating;
    /**
     * Number of times the track has been played.
     * @var int
     */
    var $PlayCount;
    /**
     * Date and time the track was last played (and finished).
     */
    var $LastPlayed;
    /**
     * Name of the album the track is from.
     * @var string
     */
    var $Album;
    /**
     * True if the album the track is on is a compilation, false otherwise.
     * @var bool
     */
    var $Compilation;
    /**
     * Order this track is on the album.
     * @var int
     */
    var $TrackNumber;
    /**
     * Total number of tracks on the album.
     * @var int
     */
    var $TrackCount;
    /**
     * The album disc the track is on.
     * @var int
     */
    var $DiscNumber;
    /**
     * Total number of discs in the album.
     * @var int
     */
    var $DiscCount;
    /**
     * Year the track/album was released/published.
     * @var int
     */
    var $Year;
    /**
     * Genre of music the track falls into.
     * @var string
     */
    var $Genre;
    /**
     * Date and time the track was added.
     */
    var $DateAdded;
    
    //todo
}
?&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comments appreciated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iTunes Playlists to Xml - version 1.6 released</title>
      <link>http://jamesskemp.github.io/words/posts/iTunes-Playlists-to-Xml-version-16-released/</link>
      <pubDate>Sat, 08 May 2010 15:00:00 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/posts/iTunes-Playlists-to-Xml-version-16-released/</guid>
      <description>&lt;p&gt;Version 1.6 of iTunes Playlists to Xml is now available for download.&lt;/p&gt;
&lt;p&gt;Download &lt;a rel=&#34;external download&#34; href=&#34;http://jamesrskemp.com/applications/iTunesPlaylistsToXml_1.6.zip&#34;&gt;iTunes Playlists to Xml 1.6&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Installing and more information&lt;/h3&gt;
&lt;p&gt;If you&#39;re new to iTunes Playlists to Xml, I&#39;ve created a &#39;product page&#39; for &lt;a rel=&#34;external&#34; href=&#34;http://jamesrskemp.com/apps/iTunesPlaylists2Xml/&#34;&gt;iTunes Playlists to Xml&lt;/a&gt; with all the information needed to get started.&lt;/p&gt;
&lt;h3&gt;Upgrading&lt;/h3&gt;
&lt;p&gt;To upgrade from &lt;strong&gt;any version of 1.4 or 1.5&lt;/strong&gt;&amp;nbsp;you need to replace the following files with those in the above archive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AlbumName.xslt&lt;/li&gt;
&lt;li&gt;iTunesPlaylists2Xml.xslt&lt;/li&gt;
&lt;li&gt;iTunesPlaylistsToXml.exe&lt;/li&gt;
&lt;li&gt;NameArtistAlbumPlay.xslt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your configuration file&amp;nbsp;should be upgraded with the new functionality automatically.&lt;/p&gt;
&lt;p&gt;To upgrade from &lt;strong&gt;version 1.3 or earlier&lt;/strong&gt;, extract the contents of the zip replacing everything &lt;em&gt;but&lt;/em&gt; the iTunesPlaylistsToXml.exe.config file; when you start the application after upgrading the configuration file &lt;em&gt;should&lt;/em&gt; be automatically upgraded with all new settings. If you get a configuration error, then replace this file with the new version. Remember to update your name in the Settings menu.&lt;/p&gt;
&lt;h3&gt;Changes from version 1.5.3&lt;/h3&gt;
&lt;p&gt;With the release of .NET Framework 4 a few weeks ago, I figure it&#39;s safe to move from .NET Framework 2.0 to 3.5 in iTunes Playlists to Xml. Therefore, &lt;a rel=&#34;external&#34; href=&#34;http://smallestdotnet.com/&#34;&gt;&lt;strong&gt;.NET Framework&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; 3.5&amp;nbsp;is now required&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In addition to the new requirement, version 1.6 of iTunes Playlists to Xml adds the ability to save playlists to HTML, in addition to XML.&lt;/p&gt;
&lt;h3&gt;Features for&amp;nbsp;future releases&lt;/h3&gt;
&lt;p&gt;A future release will allow you to change the elements that are output by default via the user interface (it&#39;s possible now via the &lt;a rel=&#34;external&#34; href=&#34;http://jamesrskemp.com/applications/iTunesPlaylistsToXml.htm#advanced&#34;&gt;command line&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Suggestions&lt;/h3&gt;
&lt;p&gt;As always, comments and suggestions are appreciated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iTunes Playlists to Xml - version 1.5.3 released</title>
      <link>http://jamesskemp.github.io/words/posts/iTunes-Playlists-to-Xml-version-153-released/</link>
      <pubDate>Sun, 10 Jan 2010 16:40:00 -0600</pubDate>
      
      <guid>http://jamesskemp.github.io/words/posts/iTunes-Playlists-to-Xml-version-153-released/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;warning&#34;&gt;
&lt;p&gt;This application has since been updated. &lt;a href=&#34;http://jamesrskemp.com/apps/iTunesPlaylists2Xml/&#34;&gt;Read about the current version of iTunes Playlists to Xml.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Version 1.5.3 of iTunes Playlists to Xml is now available for download.&lt;/p&gt;
&lt;p&gt;Download &lt;a rel=&#34;external download&#34; href=&#34;http://jamesrskemp.com/applications/iTunesPlaylistsToXml_1.5.3.zip&#34;&gt;iTunes Playlists to Xml 1.5.3&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Installing and more information&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re new to iTunes Playlists to Xml, I&amp;rsquo;ve created a &amp;lsquo;product page&amp;rsquo; for &lt;a rel=&#34;external&#34; href=&#34;http://jamesrskemp.com/apps/iTunesPlaylists2Xml/&#34;&gt;iTunes Playlists to Xml&lt;/a&gt; with all the information needed to get started.&lt;/p&gt;
&lt;h3&gt;Upgrading&lt;/h3&gt;
&lt;p&gt;To upgrade from &lt;strong&gt;any version of 1.4 or 1.5&lt;/strong&gt;&amp;nbsp;you simply need to replace the &lt;strong&gt;iTunesPlaylistsToXml.exe&lt;/strong&gt; file with the one in the above archive. Your configuration file&amp;nbsp;should be upgraded with the new functionality automatically.&lt;/p&gt;
&lt;p&gt;To upgrade from &lt;strong&gt;version 1.3 or earlier&lt;/strong&gt;, extract the contents of the zip replacing everything &lt;em&gt;but&lt;/em&gt; the iTunesPlaylistsToXml.exe.config file; when you start the application after upgrading the configuration file &lt;em&gt;should&lt;/em&gt; be automatically upgraded with all new settings. If you get a configuration error, then replace this file with the new version. Remember to update your name in the Settings menu.&lt;/p&gt;
&lt;h3&gt;Changes from version 1.5.2&lt;/h3&gt;
&lt;p&gt;Version 1.5.3 of iTunes Playlists to Xml adds the ability to always save the output with a particular file name, instead of the default which uses the current date and time.&lt;/p&gt;
&lt;p&gt;This option can be set in the settings as the &amp;ldquo;Always save as&amp;rdquo; option.&lt;/p&gt;
&lt;h3&gt;Features for&amp;nbsp;future releases&lt;/h3&gt;
&lt;p&gt;A future release will allow you to change the elements that are output by default via the user interface (it&amp;rsquo;s possible now via the &lt;a rel=&#34;external&#34; href=&#34;http://jamesrskemp.com/applications/iTunesPlaylistsToXml.htm#advanced&#34;&gt;command line&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The next version may also require &lt;a rel=&#34;external&#34; href=&#34;http://smallestdotnet.com/&#34;&gt;.NET Framework&lt;/a&gt; version 3.5. If you feel strongly about this, please let me know by leaving&amp;nbsp;a comment below.&lt;/p&gt;
&lt;h3&gt;Suggestions&lt;/h3&gt;
&lt;p&gt;As always, comments and suggestions are appreciated.&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iTunes Playlists to Xml - version 1.5.1 released</title>
      <link>http://jamesskemp.github.io/words/posts/iTunes-Playlist-to-Xml-version-151-released/</link>
      <pubDate>Sat, 14 Nov 2009 16:55:00 -0600</pubDate>
      
      <guid>http://jamesskemp.github.io/words/posts/iTunes-Playlist-to-Xml-version-151-released/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;warning&#34;&gt;
&lt;p&gt;This application has since been updated. &lt;a href=&#34;http://jamesrskemp.com/apps/iTunesPlaylists2Xml/&#34;&gt;Read about the current version of iTunes Playlists to Xml.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;&lt;a rel=&#34;external download&#34; href=&#34;http://jamesrskemp.com/applications/iTunesPlaylistsToXml_1.5.2.1.zip&#34;&gt;Version 1.5.2.1&lt;/a&gt; is available for download, which fixes an issue with version 1.5.2. Thanks to Pierre for bringing this to my attention.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;&lt;a rel=&#34;external download&#34; href=&#34;http://jamesrskemp.com/applications/iTunesPlaylistsToXml_1.5.2.zip&#34;&gt;Version 1.5.2&lt;/a&gt; is available for download, which adds the -output argument.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Version 1.5.1 of iTunes Playlists to Xml is now available for download.&lt;/p&gt;
&lt;p&gt;Download &lt;a rel=&#34;external download&#34; href=&#34;http://jamesrskemp.com/applications/iTunesPlaylistsToXml_1.5.1.zip&#34;&gt;iTunes Playlists to Xml 1.5.1&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Installing and more information&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re new to iTunes Playlists to Xml, I&amp;rsquo;ve created a &amp;lsquo;product page&amp;rsquo; for &lt;a rel=&#34;external&#34; href=&#34;http://jamesrskemp.com/apps/iTunesPlaylists2Xml/&#34;&gt;iTunes Playlists to Xml&lt;/a&gt; with all the information needed to get started.&lt;/p&gt;
&lt;h3&gt;Upgrading&lt;/h3&gt;
&lt;p&gt;To upgrade from &lt;strong&gt;any version of 1.4 or 1.5&lt;/strong&gt;&amp;nbsp;you simply need to replace the &lt;strong&gt;iTunesPlaylistsToXml.exe&lt;/strong&gt; file with the one in the above archive. You should not need to update your configuration.&lt;/p&gt;
&lt;p&gt;To upgrade from &lt;strong&gt;version 1.3 or earlier&lt;/strong&gt;, extract the contents of the zip replacing everything &lt;em&gt;but&lt;/em&gt; the iTunesPlaylistsToXml.exe.config file; when you start the application after upgrading the configuration file &lt;em&gt;should&lt;/em&gt; be automatically upgraded with all new settings. If you get a configuration error, then replace this file with the new version. Remember to update your name in the Settings.&lt;/p&gt;
&lt;h3&gt;Changes from version 1.5&lt;/h3&gt;
&lt;p&gt;Version 1.5.1 of iTunes Playlists to Xml adds the ability to use command-line arguments when starting the application. The following arguments can be used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-connect
&lt;ul&gt;
&lt;li&gt;Will automatically connect to iTunes when the program starts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-source:x &lt;em&gt;or&lt;/em&gt; -source:&amp;ldquo;x&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;Will automatically attempt to select the source with a name of &lt;em&gt;x&lt;/em&gt; after connecting to iTunes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-playlist:x &lt;em&gt;or&lt;/em&gt; -playlist:&amp;ldquo;x&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;Will automatically attempt to select the playlist with a name of &lt;em&gt;x&lt;/em&gt; after connecting to iTunes.&lt;/li&gt;
&lt;li&gt;-source is required if using -playlist.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-output:x &lt;em&gt;or&lt;/em&gt; -output:&amp;ldquo;x&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;Will check the defined output items, comma-delimited, by default after startup.&lt;/li&gt;
&lt;li&gt;Requires version 1.5.2 or later.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-save
&lt;ul&gt;
&lt;li&gt;Will automatically save any generated playlist to Xml, once it is generated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-exit
&lt;ul&gt;
&lt;li&gt;Will automatically exit the program after saving a playlist.&lt;/li&gt;
&lt;li&gt;Both -connect and -save are required when using -exit.&lt;/li&gt;
&lt;li&gt;If there is a problem saving the playlist to a file, the program will not automatically exit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, running the following from the command line will connect to iTunes immediately, select the &lt;strong&gt;James Skemp&amp;rsquo;s 80 gig&lt;/strong&gt; source and &lt;strong&gt;My Top Rated&lt;/strong&gt; playlist.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;powershell&#34;&gt;iTunesPlaylistsToXml.exe -connect -source:&amp;ldquo;James Skemp&amp;rsquo;s 80 gig&amp;rdquo; -playlist:&amp;ldquo;My Top Rated&amp;rdquo;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following will do the same as above as well as save the playlist and exit immediately.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;powershell&#34;&gt;iTunesPlaylistsToXml.exe -connect -source:&amp;ldquo;James Skemp&amp;rsquo;s 80 gig&amp;rdquo; -playlist:&amp;ldquo;My Top Rated&amp;rdquo; -save -exit&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Features for&amp;nbsp;future releases&lt;/h3&gt;
&lt;p&gt;A future&amp;nbsp;release will allow you to change the elements that are output by default, as well as set these via the command line.&lt;/p&gt;
&lt;p&gt;Additionally I&amp;rsquo;ll be adding the ability to change how the output files are named (amount of flexibility to be determined), and where they are saved.&lt;/p&gt;
&lt;h3&gt;Suggestions&lt;/h3&gt;
&lt;p&gt;As always, comments and suggestions are appreciated.&lt;/p&gt;
&lt;p&gt;Special thanks to Pierre for his feedback, which has directly resulted in this new release.&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project page for iTunes Playlists to Xml now created</title>
      <link>http://jamesskemp.github.io/words/posts/Project-page-for-iTunes-Playlists-to-Xml-now-created/</link>
      <pubDate>Mon, 07 Sep 2009 11:20:00 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/posts/Project-page-for-iTunes-Playlists-to-Xml-now-created/</guid>
      <description>&lt;p&gt;For releases of iTunes Playlists to Xml I&#39;ve just been creating new posts with details, but that doesn&#39;t make all that much sense.&lt;/p&gt;
&lt;p&gt;So, I&#39;ve created an actual project/product page for the application.&lt;/p&gt;
&lt;p&gt;&lt;a rel=&#34;external&#34; href=&#34;http://jamesrskemp.com/applications/iTunesPlaylistsToXml.htm&#34;&gt;View the project page for iTunes Playlists to Xml&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Comments appreciated.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
