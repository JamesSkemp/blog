<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Last.Fm on James Skemp&#39;s StrivingLife</title>
    <link>http://words.strivinglife.com/tags/last/index.fm/</link>
    <description>Recent content in Last.Fm on James Skemp&#39;s StrivingLife</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All content copyright 1999-2016 James Skemp, unless otherwise noted. This work is licensed under the Creative Commons License Attribution-Noncommercial-No Derivative Works 3.0.</copyright>
    <lastBuildDate>Sat, 12 Sep 2009 16:33:00 -0500</lastBuildDate>
    <atom:link href="http://words.strivinglife.com/tags/last.fm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Parsing Last.fm Web Services&#39; artist.getSimilar with C# and LINQ to XML</title>
      <link>http://words.strivinglife.com/post/Parsing-Lastfm-Web-Services-artistgetSimilar-with-C-and-LINQ-to-XML/</link>
      <pubDate>Sat, 12 Sep 2009 16:33:00 -0500</pubDate>
      
      <guid>http://words.strivinglife.com/post/Parsing-Lastfm-Web-Services-artistgetSimilar-with-C-and-LINQ-to-XML/</guid>
      <description>&lt;p&gt;The following covers how to parse the XML response of artist.getSimilar, from Last.fm&#39;s Web Services.&lt;/p&gt;
&lt;h3&gt;Setup and assumptions&lt;/h3&gt;
&lt;p&gt;The first step is sign up for a free &lt;a rel=&#34;external&#34; href=&#34;http://www.last.fm/api&#34;&gt;API account at Last.fm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You&#39;ll also need to target .NET Framework 3.5 when you setup your project, so as to access LINQ functionality.&lt;/p&gt;
&lt;p&gt;When writing the steps listed below, I was working on a Windows Forms Application, but the steps should be the same, or very similar, for other project types.&lt;/p&gt;
&lt;h3&gt;Creating the base class&lt;/h3&gt;
&lt;p&gt;The first thing I&#39;ve done is created a new class file in my project called Lastfm.cs, resulting in the following.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace JamesRSkemp.WebServices {
    class Lastfm {
        private const string LastFmApiKey = &#34;EnterYourApiKeyHere&#34;;

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&#39;ll add a new method to the Lastfm class to return the base Url we&#39;ll need to make Web service requests.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;     /// &amp;lt;summary&amp;gt;
        /// Get the base Url that we&#39;ll use to make Web service requests.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;The base Url to use to make Web service requests.&amp;lt;/returns&amp;gt;
        static private string GetBaseRequestUrl() {
            string baseUrl = &#34;http://ws.audioscrobbler.com/2.0/?api_key=&#34; + LastFmApiKey;
            return baseUrl;
        }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we&#39;ll create a method to make a request to a Web service and return the full response.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;     /// &amp;lt;summary&amp;gt;
        /// Gets the data from an HTTP request.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&#34;requestUrl&#34;&amp;gt;The full Url of the request to make.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;Returns a string with the text returned from the request.&amp;lt;/returns&amp;gt;
        private string GetServiceResponse(string requestUrl) {
            string httpResponse = &#34;&#34;;

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(requestUrl);
            request.Timeout = 15000;
            HttpWebResponse response = null;
            StreamReader reader = null;

            try {
                response = (HttpWebResponse)request.GetResponse();
                reader = new StreamReader(response.GetResponseStream());

                httpResponse = reader.ReadToEnd();
            } finally {
                if (reader != null) {
                    reader.Close();
                }
                if (response != null) {
                    response.Close();
                }
            }

            return httpResponse;
        }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following references must also be added.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;using System.Net;
using System.IO;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we use this class, we want to have our data returned in an easy to use format. For ease, we&#39;ll have it return a DataTable. We&#39;ll have to add the appropriate reference first.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;using System.Data;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then began our method as follows.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;     public DataTable GetSimilarArtists(string artistName) {
            if (String.IsNullOrEmpty(artistName)) {
                throw new Exception(&#34;Artist name must be populated.&#34;);
            } else {
                string requestUrl = GetBaseRequestUrl();
                requestUrl += &#34;&amp;amp;method=artist.getSimilar&amp;amp;artist=&#34; + System.Web.HttpUtility.UrlEncode(artistName.Trim());

                string serviceResponse = GetServiceResponse(requestUrl);

                DataTable similarArtists = new DataTable();
                
                // TODO

                return similarArtists;
            }
        }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we were to make a request now, we&#39;d see that the data returned is formatted similar to the following, for a request for &lt;strong&gt;Bruce Springsteen&lt;/strong&gt;. (For ease and sanity, data truncated.)&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;
&amp;lt;lfm status=&#34;ok&#34;&amp;gt;
&amp;lt;similarartists artist=&#34;Bruce Springsteen&#34;&amp;gt;
&amp;lt;artist&amp;gt;
    &amp;lt;name&amp;gt;Bruce Springsteen &amp;amp; The E Street Band&amp;lt;/name&amp;gt;
    &amp;lt;mbid&amp;gt;5a1283bf-81d5-4700-8919-683eeaaf2beb&amp;lt;/mbid&amp;gt;
    &amp;lt;match&amp;gt;100&amp;lt;/match&amp;gt;
    &amp;lt;url&amp;gt;www.last.fm/music/Bruce%2BSpringsteen%2B%2526%2BThe%2BE%2BStreet%2BBand&amp;lt;/url&amp;gt;
    &amp;lt;image size=&#34;small&#34;&amp;gt;http://userserve-ak.last.fm/serve/34/8415485.jpg&amp;lt;/image&amp;gt;
    &amp;lt;image size=&#34;medium&#34;&amp;gt;http://userserve-ak.last.fm/serve/64/8415485.jpg&amp;lt;/image&amp;gt;
    &amp;lt;image size=&#34;large&#34;&amp;gt;http://userserve-ak.last.fm/serve/126/8415485.jpg&amp;lt;/image&amp;gt;
    &amp;lt;image size=&#34;extralarge&#34;&amp;gt;http://userserve-ak.last.fm/serve/252/8415485.jpg&amp;lt;/image&amp;gt;
    &amp;lt;image size=&#34;mega&#34;&amp;gt;http://userserve-ak.last.fm/serve/500/8415485/Bruce+Springsteen++The+E+Street+Band+estreet.jpg&amp;lt;/image&amp;gt;
    &amp;lt;streamable&amp;gt;1&amp;lt;/streamable&amp;gt;
&amp;lt;/artist&amp;gt;
[...]
&amp;lt;/similarartists&amp;gt;&amp;lt;/lfm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&#39;d first need to add a reference so that we can parse through the returned response.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;using System.Xml.Linq;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now create our LINQ to XML query to access the similar artist&#39;s name and match percentage.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;             var xmlResponse = XElement.Parse(serviceResponse);

                // Parse through the returned Xml for the name and match value for each similar artist.
                var artists = from artistsSimilar in xmlResponse.Descendants(&#34;artist&#34;)
                              select new {
                                  name = artistsSimilar.Element(&#34;name&#34;).Value,
                                  match = artistsSimilar.Element(&#34;match&#34;).Value
                              };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we can create the DataTable that we&#39;ll use to store the name and math values.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;             DataTable similarArtists = new DataTable();
                similarArtists.Columns.Add(&#34;Artist&#34;);
                similarArtists.Columns.Add(&#34;Match&#34;, System.Type.GetType(&#34;System.Double&#34;));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally we can loop through each result returned from our LINQ to XML query, adding a new row to the table, for each.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;             if (artists.Count() &amp;gt; 0) {
                    DataRow artistsRow;
                    foreach (var artist in artists) {
                        artistsRow = similarArtists.NewRow();
                        artistsRow[&#34;Artist&#34;] = artist.name;
                        artistsRow[&#34;Match&#34;] = artist.match;
                        similarArtists.Rows.Add(artistsRow);
                    }
                }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally we return the populated DataTable.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;             return similarArtists;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming a Windows Form Application with a text box (textBox1), a DataGridView (dataGridView1), and a button (button1), we could do the following (assuming the appropriate references have been added).&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;     private void button1_Click(object sender, EventArgs e) {
            if (!String.IsNullOrEmpty(textBox1.Text)) {
                Lastfm lastFmRequest = new Lastfm();

                DataTable results = lastFmRequest.GetSimilarArtists(textBox1.Text);

                dataGridView1.DataSource = results;
            } else {
                MessageBox.Show(&#34;You must enter an artist to continue.&#34;);
                textBox1.Focus();
            }
        }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Taken together, that results in the following. (&lt;a rel=&#34;download&#34; href=&#34;http://media.jamesrskemp.com/articles/JamesRSkemp.WebServices.Lastfm.cs.txt&#34;&gt;Download JamesRSkemp.WebServices.Lastfm.cs&lt;/a&gt;.)&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;/*
Created by James Skemp - &lt;a href=&#34;http://jamesrskemp.com/&#34;&gt;http://jamesrskemp.com/&lt;/a&gt;
Version 1.0
More information at http://strivinglife.com/words/post/Parsing-Lastfm-Web-Services-artistgetSimilar-with-C-and-LINQ-to-XML.aspx
Shared under a Creative Commons Attribution 3.0 United States License - http://creativecommons.org/licenses/by/3.0/us/
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.IO;
using System.Data;
using System.Xml.Linq;

namespace JamesRSkemp.WebServices {
    class Lastfm {
        /// &amp;lt;summary&amp;gt;
        /// Key used to access Last.fm Web services.
        /// &amp;lt;/summary&amp;gt;
        private const string LastFmApiKey = &#34;EnterYourApiKeyHere&#34;;

        /// &amp;lt;summary&amp;gt;
        /// Return artists similar to the one passed, with a match percentage.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&#34;artistName&#34;&amp;gt;The name of the artist to use for the request.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;DataTable with artist names and match percentage, as a Double.&amp;lt;/returns&amp;gt;
        public DataTable GetSimilarArtists(string artistName) {
            if (String.IsNullOrEmpty(artistName)) {
                throw new Exception(&#34;Artist name must be populated.&#34;);
            } else {
                string requestUrl = GetBaseRequestUrl();
                requestUrl += &#34;&amp;amp;method=artist.getSimilar&amp;amp;artist=&#34; + System.Web.HttpUtility.UrlEncode(artistName.Trim());

                string serviceResponse = GetServiceResponse(requestUrl);

                var xmlResponse = XElement.Parse(serviceResponse);

                // Parse through the returned Xml for the name and match value for each similar artist.
                var artists = from artistsSimilar in xmlResponse.Descendants(&#34;artist&#34;)
                              select new {
                                  name = artistsSimilar.Element(&#34;name&#34;).Value,
                                  match = artistsSimilar.Element(&#34;match&#34;).Value
                              };

                DataTable similarArtists = new DataTable();
                similarArtists.Columns.Add(&#34;Artist&#34;);
                similarArtists.Columns.Add(&#34;Match&#34;, System.Type.GetType(&#34;System.Double&#34;));

                if (artists.Count() &amp;gt; 0) {
                    DataRow artistsRow;
                    foreach (var artist in artists) {
                        artistsRow = similarArtists.NewRow();
                        artistsRow[&#34;Artist&#34;] = artist.name;
                        artistsRow[&#34;Match&#34;] = artist.match;
                        similarArtists.Rows.Add(artistsRow);
                    }
                }

                return similarArtists;
            }
        }

        /// &amp;lt;summary&amp;gt;
        /// Get the base Url that we&#39;ll use to make Web service requests.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;The base Url to use to make Web service requests.&amp;lt;/returns&amp;gt;
        private string GetBaseRequestUrl() {
            string baseUrl = &#34;http://ws.audioscrobbler.com/2.0/?api_key=&#34; + LastFmApiKey;
            return baseUrl;
        }

        /// &amp;lt;summary&amp;gt;
        /// Gets the data from an HTTP request.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&#34;requestUrl&#34;&amp;gt;The full Url of the request to make.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;Returns a string with the text returned from the request.&amp;lt;/returns&amp;gt;
        private string GetServiceResponse(string requestUrl) {
            string httpResponse = &#34;&#34;;

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(requestUrl);
            request.Timeout = 15000;
            HttpWebResponse response = null;
            StreamReader reader = null;

            try {
                response = (HttpWebResponse)request.GetResponse();
                reader = new StreamReader(response.GetResponseStream());

                httpResponse = reader.ReadToEnd();
            } finally {
                if (reader != null) {
                    reader.Close();
                }
                if (response != null) {
                    response.Close();
                }
            }

            return httpResponse;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Advanced error handling is missing, but this should give you a basic idea of how you can go about easily accessing Last.fm&#39;s Web Services, and parsing returned data.&lt;/p&gt;
&lt;h3&gt;Final thoughts&lt;/h3&gt;
&lt;p&gt;Questions? Comments? Concerns? Please add a comment below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Updated 9/12/2009, 15:55:&lt;/strong&gt; I was doing it in my implementation, but added simple check for a populated textBox1 to the above code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>