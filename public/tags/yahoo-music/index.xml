<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yahoo Music on James Skemp&#39;s Test Hugo-Generated Site</title>
    <link>http://jamesskemp.github.io/words/tags/yahoo-music/</link>
    <description>Recent content in Yahoo Music on James Skemp&#39;s Test Hugo-Generated Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Sep 2009 21:30:00 -0500</lastBuildDate>
    <atom:link href="http://jamesskemp.github.io/words/tags/yahoo-music/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Parsing Yahoo! Music&#39;s Artist Web Services with C# and LINQ to XML - Search for artists</title>
      <link>http://jamesskemp.github.io/words/posts/Parsing-Yahoo%21-Musics-Artist-Web-Services-with-C-and-LINQ-to-XML-Search-for-artists/</link>
      <pubDate>Sat, 12 Sep 2009 21:30:00 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/posts/Parsing-Yahoo%21-Musics-Artist-Web-Services-with-C-and-LINQ-to-XML-Search-for-artists/</guid>
      <description>&lt;p&gt;Similar to my post on &lt;a href=&#34;http://strivinglife.com/words/post/Parsing-Lastfm-Web-Services-artistgetSimilar-with-C-and-LINQ-to-XML.aspx&#34;&gt;parsing Last.fm&#39;s artist.getSimilar&lt;/a&gt;, I&#39;ve been working with Yahoo! Music&#39;s Web services today.&lt;/p&gt;
&lt;p&gt;Unfortunately, Yahoo!&#39;s services aren&#39;t quite as friendly as those made available by Last.fm.&lt;/p&gt;
&lt;p&gt;So that I remember, and others don&#39;t have to tackle this as well, here&#39;s the class I&#39;ve created. (&lt;a rel=&#34;external&#34; href=&#34;http://media.jamesrskemp.com/articles/JamesRSkemp.WebServices.YahooMusic.cs.txt&#34;&gt;Download JamesRSkemp.WebServices.YahooMusic.cs&lt;/a&gt;.)&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;/*
Created by James Skemp - http://jamesrskemp.com/
Version 1.0
More information at http://strivinglife.com/words/post/Parsing-Yahoo!-Musics-Artist-Web-Services-with-C-and-LINQ-to-XML-Search-for-artists.aspx
Shared under a Creative Commons Attribution 3.0 United States License - http://creativecommons.org/licenses/by/3.0/us/
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.IO;
using System.Xml.Linq;
using System.Data;

namespace JamesRSkemp.WebServices {
    class YahooMusic {
        /// &amp;lt;summary&amp;gt;
        /// Key used to access Yahoo! Music Web services.
        /// &amp;lt;/summary&amp;gt;
        private string AppId = &#34;&#34;;

        /// &amp;lt;summary&amp;gt;
        /// Create a new YahooMusic object.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&#34;appId&#34;&amp;gt;Application ID from Yahoo! Developer Network.&amp;lt;/param&amp;gt;
        public YahooMusic(string appId) {
            if (appId.Trim() != &#34;&#34;) {
                AppId = appId;
            } else {
                throw new Exception(&#34;You must pass a valid API identifier.&#34;);
            }
        }

        /// &amp;lt;summary&amp;gt;
        /// Return artists similar to the one passed, with a match percentage.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&#34;artistName&#34;&amp;gt;The name of the artist to use for the request.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;DataTable with artist names.&amp;lt;/returns&amp;gt;
        public DataTable GetSimilarArtists(string artistName) {

            string requestUrl = &#34;http://us.music.yahooapis.com/artist/v1/list/search/artist/&#34;
                + System.Web.HttpUtility.UrlEncode(artistName.Trim())
                + &#34;?appid=&#34; + AppId + &#34;&amp;amp;response=topsimilar&#34;;

            string serviceResponse = GetServiceResponse(requestUrl);

            var xmlResponse = XElement.Parse(serviceResponse);

            var artistsCount = from Artists in xmlResponse.Descendants(&#34;TopSimilarArtists&#34;).Descendants(&#34;Artist&#34;)
                               select new {
                                   name = Artists.Attribute(&#34;name&#34;).Value
                               };

            DataTable similarArtists = new DataTable();
            similarArtists.Columns.Add(&#34;Artist&#34;);

            if (artistsCount.Count() &amp;gt; 0) {
                DataRow artistsRow;

                foreach (var artist in artistsCount) {
                    artistsRow = similarArtists.NewRow();
                    artistsRow[&#34;Artist&#34;] = artist.name;
                    similarArtists.Rows.Add(artistsRow);
                }
            }

            return similarArtists;
        }

        /// &amp;lt;summary&amp;gt;
        /// Gets the data from an HTTP request.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&#34;requestUrl&#34;&amp;gt;The full Url of the request to make.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;Returns a string with the text returned from the request.&amp;lt;/returns&amp;gt;
        private string GetServiceResponse(string requestUrl) {
            string httpResponse = &#34;&#34;;

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(requestUrl);
            request.Timeout = 15000;
            HttpWebResponse response = null;
            StreamReader reader = null;

            try {
                response = (HttpWebResponse)request.GetResponse();
                reader = new StreamReader(response.GetResponseStream());

                httpResponse = reader.ReadToEnd();
            } finally {
                if (reader != null) {
                    reader.Close();
                }
                if (response != null) {
                    response.Close();
                }
            }

            return httpResponse;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One issue I do have is that I can&#39;t figure out how to get the count attribute off the root element that&#39;s returned. Try and search as I might, I can&#39;t figure it out.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
