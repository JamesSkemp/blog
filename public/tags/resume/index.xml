<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resume on James Skemp&#39;s Test Hugo-Generated Site</title>
    <link>http://words.strivinglife.com/tags/resume/</link>
    <description>Recent content in Resume on James Skemp&#39;s Test Hugo-Generated Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Oct 2010 10:00:00 -0500</lastBuildDate>
    <atom:link href="http://words.strivinglife.com/tags/resume/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting started with StatSVN (0.7.0) and CollabNet Subversion Server</title>
      <link>http://words.strivinglife.com/post/Getting-started-with-StatSVN-0-7-0-and-CollabNet-Subversion-Server/</link>
      <pubDate>Sun, 31 Oct 2010 10:00:00 -0500</pubDate>
      
      <guid>http://words.strivinglife.com/post/Getting-started-with-StatSVN-0-7-0-and-CollabNet-Subversion-Server/</guid>
      <description>&lt;p&gt;This past week I was looking at advanced statistical information about a couple Subversion repositories we use at work.&lt;/p&gt;
&lt;p&gt;While TortoiseSVN has some basic reporting, the downside is that, out of the box, users must have access to the repository to access this information.&lt;/p&gt;
&lt;p&gt;&lt;a rel=&#34;external&#34; href=&#34;http://www.statsvn.org/&#34;&gt;StatSVN&lt;/a&gt;, seemingly the most popular solution, works rather well as an alternative to granting this access. The downside (or upside, depending upon your perspective) is that viewers of the report can see what files changed, and how many lines, but not what the actual changes were (outside of the logged message).&lt;/p&gt;
&lt;p&gt;At least for our implementation, the lines of code statistic, which seems to be stressed in StatSVN, is also fairly useless for specific commits, which in turn throws off the statistics for the entire repository. (We use third-party code, so being the user that committed that code at a couple of different points, that inflated my numbers.)&lt;/p&gt;
&lt;p&gt;Having worked through part of the process at work, refined it at home, and performed a second implementation at work, I present the following steps to implement StatSVN with a CollabNet Subversion Server installation.&lt;/p&gt;
&lt;p&gt;Note that these steps, with minor modifications, willl work fine with any Windows and Apache-based installation of Subversion.&lt;/p&gt;
&lt;h3&gt;The basic steps&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;If using authentication, create a user, if one isn&#39;t already created, that has access to the repositories and that can be used to checkout the repositories to report on.&lt;/li&gt;
&lt;li&gt;If necessary, download and install the Java 4+ requirement for StatSVN.&lt;/li&gt;
&lt;li&gt;Download and extract &lt;a rel=&#34;external&#34; href=&#34;http://www.statsvn.org/&#34;&gt;StatSVN&lt;/a&gt; to a directory of your choosing. For example, C:\statsvn&lt;/li&gt;
&lt;li&gt;Create a directory to store the generated content from StatSVN.&lt;/li&gt;
&lt;li&gt;Update Apache to allow access to the reports directory (from step 4).&lt;/li&gt;
&lt;li&gt;Checkout or update a working copy of the repository to report on.&lt;/li&gt;
&lt;li&gt;Generate the StatSVN reports for the working copy of the repository (from step 6).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To make this even easier, I&#39;m including the implementation I&#39;ve setup at home.&lt;/p&gt;
&lt;h3&gt;Example implementation&lt;/h3&gt;
&lt;p&gt;StatSVN directory: C:\statsvn&lt;/p&gt;
&lt;p&gt;StatSVN outputs directory: C:\statsvn\output&lt;/p&gt;
&lt;p&gt;Working copies of repositories are saved to the C:\statsvn directory (C:\statsvn\&lt;em&gt;repositoryName&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;From the command line at &lt;strong&gt;C:\Program Files (x86)\CollabNet\Subversion Server\httpd\bin&lt;/strong&gt;&amp;nbsp;I ran the following:&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;powershell&#34;&gt;htpasswd -m c:\svn_resources\svn-auth-file james-cq5320y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was then prompted for a password, which I entered twice. This now gives me an account I can use within a batch file to checkout/update repositories, that is specific to the server.&lt;/p&gt;
&lt;p&gt;Next the Apache httpd.conf file needed to have the two following additions (where applicable):&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;xml&#34;&gt;Alias /stats C:\statsvn\output&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That allows http://server1:8080/stats to point to the appropriate directory.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;Directory C:/statsvn/output&amp;gt;
    Options Indexes
    allow from all
&amp;lt;/Directory&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the above allows the directory structure to be returned (the alternative is to manually create an index page, either static or dynamic), that anyone can access. (Since access to this server is only available on my network, this works fine for my situtation.)&lt;/p&gt;
&lt;p&gt;Since we&#39;ve modified the Apache configuration we need to restart the service.&lt;/p&gt;
&lt;p&gt;Next we create the batch file that will generate the StatSVN outputs.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;powershell&#34;&gt;set repositoryName=NorthwindExamples
svn checkout http://localhost:8080/svn/%repositoryName% --username james-cq5320y --password PASSWORD
cd %repositoryName%
svn log -v --xml &amp;gt; ..\%repositoryName%.log
cd ..java -jar statsvn.jar -output-dir output\%repositoryName%.Stats %repositoryName%.log %repositoryName%
REM pause&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After running this a couple of times I felt satisified that it was working correctly, so you&#39;ll see that I commented out the pause.&lt;/p&gt;
&lt;p&gt;Of course, that works fine for the initial checkout. Once you have a working copy you can simply update, such as shown in the below batch file contents.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;powershell&#34;&gt;set repositoryName=NorthwindExamples
cd %repositoryName%
svn update
svn log -v --xml &amp;gt; ..\%repositoryName%.log
cd ..java -jar statsvn.jar -output-dir output\%repositoryName%.Stats %repositoryName%.log %repositoryName%
pause&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Optimizations&lt;/h3&gt;
&lt;p&gt;Of course, some optimizations could be made, as currently this makes a bit of a mess of the StatSVN directory.&lt;/p&gt;
&lt;p&gt;Because of this I&#39;d recommend creating a directory for the working copy and/or logs generated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Subversion repository dump: WPF and Silverlight application, with MVVM (revision 25)</title>
      <link>http://words.strivinglife.com/post/Subversion-repository-dump-WPF-and-Silverlight-application-with-MVVM-revision-25/</link>
      <pubDate>Sun, 24 Oct 2010 15:00:00 -0500</pubDate>
      
      <guid>http://words.strivinglife.com/post/Subversion-repository-dump-WPF-and-Silverlight-application-with-MVVM-revision-25/</guid>
      <description>&lt;p&gt;As&amp;nbsp;alluded to&amp;nbsp;in a previous post, &lt;a href=&#34;http://strivinglife.com/words/post/Excellent-Silverlight-WPF-MVVM-video-series.aspx&#34;&gt;in regards to an excellent Silverlight/WPF with MVVM tutorial&lt;/a&gt;, I&#39;ve begun looking into the MVVM pattern, as I begin moving towards WPF and Silverlight for applications.&lt;/p&gt;
&lt;p&gt;Having fully watched the series twice, and begun a third watch working through the example, albeit with the Northwind sample database, I decided to share my labor with others.&lt;/p&gt;
&lt;p&gt;To that end I present a Subversion repository dump with a fairly step-by-step look at how to go from nothing to a simple application with WPF and Silverlight support. Built in Visual Studio 2010, against .NET 4.&lt;/p&gt;
&lt;p&gt;Download the Subversion (version 1.6.13) repository dump: &lt;a rel=&#34;external download&#34; href=&#34;http://media.jamesrskemp.com/download6s/NorthwindExamplesDump_rev25.zip&#34;&gt;NorthwindExamples dump&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The repository currently consists of 25 revisions, and does not &lt;em&gt;yet&lt;/em&gt; include unit testing. (I need to re-watch those particular videos before I implement.) I also made one mistake with the ViewModel class not being public, but ... otherwise it&#39;s not too bad.&lt;/p&gt;
&lt;p&gt;You can also download an export of the repository, again through revision 25: &lt;a rel=&#34;external download&#34; href=&#34;http://media.jamesrskemp.com/download6s/NorthwindExamplesExport_rev25.zip&#34;&gt;NorthwindExamples export&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that you&#39;ll want to set either Northwind.Service or Northwind.WpfClient as the startup projects. If the former, set Northwind.SilverlightTestPage.html as the startup page.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iTunes Playlists to Xml: Parsing categories with LINQ</title>
      <link>http://words.strivinglife.com/post/iTunes-Playlists-to-Xml-Parsing-categories-with-LINQ/</link>
      <pubDate>Wed, 20 Oct 2010 08:35:00 -0500</pubDate>
      
      <guid>http://words.strivinglife.com/post/iTunes-Playlists-to-Xml-Parsing-categories-with-LINQ/</guid>
      <description>&lt;p&gt;&lt;p&gt;I recently had the need to determine what types of music I had within my collection of music. Since I&amp;nbsp;created &lt;a rel=&#34;external&#34; href=&#34;http://jamesrskemp.com/apps/iTunesPlaylists2Xml&#34;&gt;iTunes Playlists to Xml&lt;/a&gt; so that I could export out my library on my iPod, it was easy enough to run that and then open &lt;a rel=&#34;external&#34; href=&#34;http://www.linqpad.net/&#34;&gt;LINQPad&lt;/a&gt; to run the following query.&lt;/p&gt;
&lt;p&gt;Obviously, you must export the Genre field in order for the following query to work.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;// Location to the XML from iTunes Playlists to XML
String playlistXml = @&amp;ldquo;C:\Users\James\Projects\services\WcfRestService\App_Data\playlistXml.xml&amp;rdquo;;&lt;/p&gt;

&lt;p&gt;XDocument xml = XDocument.Load(playlistXml);&lt;/p&gt;

&lt;p&gt;var categories = from track in xml.Descendants(&amp;ldquo;track&amp;rdquo;)
    group track by track.Element(&amp;ldquo;genre&amp;rdquo;).Value into t
    orderby t.Key
    //orderby t.Count() descending
    select new {
        Category = t.Key,
        Count = t.Count()
    };&lt;/p&gt;

&lt;p&gt;categories.Dump();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you can switch the orderby lines depending upon how you want to sort the returned data.&lt;/p&gt;
&lt;p&gt;This may be something I eventually build into my application, along with other reporting features. I know that I&amp;rsquo;d love to have some comparision functionality, either built-in or as another application, so that I can see how my music tastes change, or if I&amp;rsquo;m consistent.&lt;/p&gt;
&lt;h3&gt;Sample output&lt;/h3&gt;
&lt;p&gt;With some cleanup, sample output is as follows.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alternative - 279&lt;/li&gt;
&lt;li&gt;Alternative &amp;amp; Punk - 154&lt;/li&gt;
&lt;li&gt;Alternative Rock - 282&lt;/li&gt;
&lt;li&gt;Blues - 120&lt;/li&gt;
&lt;li&gt;Books &amp;amp; Spoken - 145&lt;/li&gt;
&lt;li&gt;Children&amp;rsquo;s Music - 12&lt;/li&gt;
&lt;li&gt;Classical - 255&lt;/li&gt;
&lt;li&gt;Country - 104&lt;/li&gt;
&lt;li&gt;Dance - 76&lt;/li&gt;
&lt;li&gt;Dance &amp;amp; DJ - 220&lt;/li&gt;
&lt;li&gt;Easy Listening - 20&lt;/li&gt;
&lt;li&gt;Electronic - 278&lt;/li&gt;
&lt;li&gt;Electronica/Dance - 91&lt;/li&gt;
&lt;li&gt;Folk - 319&lt;/li&gt;
&lt;li&gt;French Pop - 90&lt;/li&gt;
&lt;li&gt;Gospel &amp;amp; Religious - 18&lt;/li&gt;
&lt;li&gt;Hard Rock &amp;amp; Metal - 6&lt;/li&gt;
&lt;li&gt;Hip Hop/Rap - 88&lt;/li&gt;
&lt;li&gt;Holiday - 18&lt;/li&gt;
&lt;li&gt;House - 4&lt;/li&gt;
&lt;li&gt;Industrial - 107&lt;/li&gt;
&lt;li&gt;Industrial Metal - 17&lt;/li&gt;
&lt;li&gt;Jazz - 30&lt;/li&gt;
&lt;li&gt;J-Pop - 48&lt;/li&gt;
&lt;li&gt;J-Rock - 23&lt;/li&gt;
&lt;li&gt;Lo-Fi - 35&lt;/li&gt;
&lt;li&gt;Metal - 82&lt;/li&gt;
&lt;li&gt;New Age - 270&lt;/li&gt;
&lt;li&gt;Pop - 1225&lt;/li&gt;
&lt;li&gt;Pop/Rock - 26&lt;/li&gt;
&lt;li&gt;R&amp;amp;B - 105&lt;/li&gt;
&lt;li&gt;R&amp;amp;B/Soul - 81&lt;/li&gt;
&lt;li&gt;Reggae - 30&lt;/li&gt;
&lt;li&gt;Rock - 3125&lt;/li&gt;
&lt;li&gt;Soundtrack - 348&lt;/li&gt;
&lt;li&gt;World - 57&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extended iTunes Track class for PHP</title>
      <link>http://words.strivinglife.com/post/Extended-iTunes-Track-class-for-PHP/</link>
      <pubDate>Sun, 26 Sep 2010 20:15:00 -0500</pubDate>
      
      <guid>http://words.strivinglife.com/post/Extended-iTunes-Track-class-for-PHP/</guid>
      <description>&lt;p&gt;In a previous article, I had outlined&amp;nbsp;&lt;a href=&#34;http://strivinglife.com/words/post/iTunes-Track-class-in-C-sharp-and-PHP.aspx&#34;&gt;classes in C# and PHP to handle&amp;nbsp;iTunes Playlists to Xml outputs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Having let it sit on the back burner for long enough, I finally went back to the PHP class and finalized the constructor. I also added two functions for sorting.&lt;/p&gt;
&lt;p&gt;Below I have the current code for the class (a &lt;a rel=&#34;external download&#34; href=&#34;http://media.jamesrskemp.com/articles/Track.php.txt&#34;&gt;current version of the Track class for PHP&lt;/a&gt; will always be available elsewhere) and then an example implementation.&lt;/p&gt;
&lt;h3&gt;Track class for PHP, version 1.0&lt;/h3&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
/**
 * Music track object.
 *
 * @author James Skemp - http://jamesrskemp.com
 * @license http://creativecommons.org/licenses/by/3.0/us/
 * @version 1.0
 */
class Track {
    /**
     * How long the track is.
     * @var string
     */
    var $Time;
    /**
     * Name or title of the track.
     * @var string
     */
    var $Name;
    /**
     * Name of the artist.
     * @var string
     */
    var $Artist;
    /**
     * Rating assigned to the track by the playlist&#39;s owner.
     * @var int
     */
    var $Rating;
    /**
     * Number of times the track has been played.
     * @var int
     */
    var $PlayCount;
    /**
     * Date and time the track was last played (and finished).
     */
    var $LastPlayed;
    /**
     * Name of the album the track is from.
     * @var string
     */
    var $Album;
    /**
     * True if the album the track is on is a compilation, false otherwise.
     * @var bool
     */
    var $Compilation;
    /**
     * Order this track is on the album.
     * @var int
     */
    var $TrackNumber;
    /**
     * Total number of tracks on the album.
     * @var int
     */
    var $TrackCount;
    /**
     * The album disc the track is on.
     * @var int
     */
    var $DiscNumber;
    /**
     * Total number of discs in the album.
     * @var int
     */
    var $DiscCount;
    /**
     * Year the track/album was released/published.
     * @var int
     */
    var $Year;
    /**
     * Genre of music the track falls into.
     * @var string
     */
    var $Genre;
    /**
     * Date and time the track was added.
     */
    var $DateAdded;

    public function  __get($name) {
        return $this-&amp;gt;$name;
    }

    public function  __set($name, $value) {
        $this-&amp;gt;$name = $value;
    }

    /**
     * Constructs a Track object from an iTunes Playlists to Xml XML output file.
     *
     * @param object $xml
     */
    function __construct($xml) {
        $this-&amp;gt;Name = (string)$xml-&amp;gt;name;
        $this-&amp;gt;Album = (string)$xml-&amp;gt;album;
        $this-&amp;gt;Artist = (string)$xml-&amp;gt;artist;
        $this-&amp;gt;Time = (string)$xml[&#39;time&#39;];
        $this-&amp;gt;Rating = (int)$xml-&amp;gt;rating;
        $this-&amp;gt;PlayCount = (int)$xml-&amp;gt;playCount;
        $this-&amp;gt;LastPlayed = (string)$xml-&amp;gt;lastPlayed;
        $this-&amp;gt;Compilation = (bool)$xml-&amp;gt;compilation;
        $this-&amp;gt;TrackNumber = (int)$xml-&amp;gt;trackNumber;
        $this-&amp;gt;TrackCount = (int)$xml-&amp;gt;trackCount;
        $this-&amp;gt;DiscNumber = (int)$xml-&amp;gt;discNumber;
        $this-&amp;gt;DiscCount = (int)$xml-&amp;gt;discCount;
        $this-&amp;gt;Year = (int)$xml-&amp;gt;year;
        $this-&amp;gt;Genre = (string)$xml-&amp;gt;genre;
        $this-&amp;gt;DateAdded = (string)$xml-&amp;gt;dateAdded;
    }

    /**
     * Function for sorting Track objects by PlayCount, ascending. Uses LastPlayed for ties.
     *
     * @access public
     * @param Track $x First object to compare.
     * @param Track $y Second object to compare.
     * @return integer Standard sorting returns.
     */
    public function SortPlayCountAsc($x, $y) {
        if ($x-&amp;gt;PlayCount == $y-&amp;gt;PlayCount) {
            if ($x-&amp;gt;LastPlayed == $y-&amp;gt;LastPlayed) {
                return 0;
            } else if ($x-&amp;gt;LastPlayed &amp;lt; $y-&amp;gt;LastPlayed) {
                return -1;
            } else {
                return 1;
            }
        } else if ($x-&amp;gt;PlayCount &amp;lt; $y-&amp;gt;PlayCount) {
            return -1;
        } else {
            return 1;
        }
    }

    /**
     * Function for sorting Track objects by PlayCount, descending. Uses LastPlayed for ties.
     *
     * @access public
     * @param Track $x First object to compare.
     * @param Track $y Second object to compare.
     * @return integer Standard sorting returns.
     */
    public function SortPlayCountDesc($x, $y) {
        if ($x-&amp;gt;PlayCount == $y-&amp;gt;PlayCount) {
            if ($x-&amp;gt;LastPlayed == $y-&amp;gt;LastPlayed) {
                return 0;
            } else if ($x-&amp;gt;LastPlayed &amp;gt; $y-&amp;gt;LastPlayed) {
                return -1;
            } else {
                return 1;
            }
        } else if ($x-&amp;gt;PlayCount &amp;lt; $y-&amp;gt;PlayCount) {
            return 1;
        } else {
            return -1;
        }
    }
}
?&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Usage example&lt;/h3&gt;
&lt;p&gt;Update XML file location as necessary. Note also I&#39;m using the &lt;a rel=&#34;external&#34; href=&#34;http://www.iis.net/download/wincacheforphp&#34;&gt;Windows Cache Extension for PHP&lt;/a&gt;. Modify the initial if statement accordingly if running in an environment that does not have this enabled.&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php include_once &#39;Track.php&#39;; ?&amp;gt;
&amp;lt;!DOCTYPE HTML PUBLIC &#34;-//W3C//DTD HTML 4.01 Transitional//EN&#34;&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=UTF-8&#34;&amp;gt;
        &amp;lt;title&amp;gt;Track class example&amp;lt;/title&amp;gt;
        &amp;lt;style type=&#34;text/css&#34;&amp;gt;
            .error {
                color:red;
            }
        &amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;?php
            $tracks = array();

            // Determine if we&#39;ve already grabbed this for the user and either pull or populate their cache.
            if (!wincache_ucache_exists(&#39;tracksData&#39;)) {
                $xml = @simplexml_load_file(&#39;playlistXml-2010-09-25T15-26-50.xml&#39;);

                if (!$xml) {
                    echo &#39;&amp;lt;p class=&#34;error&#34;&amp;gt;Could not load XML data.&amp;lt;/p&amp;gt;&#39;;
                } else {
                    echo &#34;Start creating array of tracks.&amp;lt;br /&amp;gt;&#34;;

                    foreach($xml-&amp;gt;track as $trackXml) {
                        $tracks[] = new Track($trackXml);
                    }
                    unset($trackXml);

                    echo &#34;Finished creating array of tracks.&amp;lt;br /&amp;gt;&#34;;

                    wincache_ucache_set(&#39;tracksData&#39;, $tracks);
                }
                unset($xml);
            } else {
                $tracks = wincache_ucache_get(&#39;tracksData&#39;);
            }

            echo &#34;Count = &#34;.count($tracks).&#34;&amp;lt;br /&amp;gt;&#34;;

            usort($tracks, array(&#39;Track&#39;, &#39;SortPlayCountDesc&#39;));

            echo &#34;&amp;lt;pre&amp;gt;&#34;;
            //var_dump($tracks[2]);
            echo &#34;&amp;lt;/pre&amp;gt;&#34;;

            echo &#34;&amp;lt;pre&amp;gt;&#34;;
            for ($i = 0; $i &amp;lt; 10; $i++) {
                var_dump($tracks[$i]);
            }
            unset($i);

            unset($tracks);
        ?&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Memory usage seems a bit high at the end of this script, but ... at this point I&#39;m not sure what the fix is.&lt;/p&gt;
&lt;p&gt;The fact that PHP doesn&#39;t have an easy way to&amp;nbsp;store data in an&amp;nbsp;application cache (in memory) is rather disappointing, so other than fixing minor bugs, I don&#39;t expect I&#39;ll expand too much on this implementation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iTunes Track class in C# and PHP</title>
      <link>http://words.strivinglife.com/post/iTunes-Track-class-in-C-sharp-and-PHP/</link>
      <pubDate>Wed, 08 Sep 2010 22:25:00 -0500</pubDate>
      
      <guid>http://words.strivinglife.com/post/iTunes-Track-class-in-C-sharp-and-PHP/</guid>
      <description>&lt;p&gt;I&#39;ve recently begun reading up on PHP again. As I&#39;m most fond of my iTunes Playlists to Xml application, I thought I&#39;d work with that application&#39;s output - XML files with playlist data - as I continued to dig into PHP (instead of stopping now that I know enough to tweak existing code and create new functionality).&lt;/p&gt;
&lt;p&gt;Here&#39;s a basic Track object in C# and PHP. I&#39;ll of course be elaborating on these as time goes by (and already have code for the C# implementation).&lt;/p&gt;
&lt;h3&gt;Track class in C#&lt;/h3&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;csharp&#34;&gt;/// &amp;lt;summary&amp;gt;
/// Music track object.
/// &amp;lt;/summary&amp;gt;
public class Track {
    #region Properties
    /// &amp;lt;summary&amp;gt;
    /// How long the track is.
    /// &amp;lt;/summary&amp;gt;
    public String Time { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Name or title of the track.
    /// &amp;lt;/summary&amp;gt;
    public String Name { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Name of the artist.
    /// &amp;lt;/summary&amp;gt;
    public String Artist { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Rating assigned to the track by the playlist&#39;s owner.
    /// &amp;lt;/summary&amp;gt;
    public int Rating { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Number of times the track has been played.
    /// &amp;lt;/summary&amp;gt;
    public int PlayCount { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Date and time the track was last played (and finished).
    /// &amp;lt;/summary&amp;gt;
    public DateTime LastPlayed { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Name of the album the track is from.
    /// &amp;lt;/summary&amp;gt;
    public String Album { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// True if the album the track is on is a compilation, false otherwise.
    /// &amp;lt;/summary&amp;gt;
    public Boolean Compilation { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Order this track is on the album.
    /// &amp;lt;/summary&amp;gt;
    public int TrackNumber { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Total number of tracks on the album.
    /// &amp;lt;/summary&amp;gt;
    public int TrackCount { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// The album disc the track is on.
    /// &amp;lt;/summary&amp;gt;
    public int DiscNumber { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Total number of discs in the album.
    /// &amp;lt;/summary&amp;gt;
    public int DiscCount { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Year the track/album was released/published.
    /// &amp;lt;/summary&amp;gt;
    public int Year { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Genre of music the track falls into.
    /// &amp;lt;/summary&amp;gt;
    public String Genre { get; set; }
    /// &amp;lt;summary&amp;gt;
    /// Date and time the track was added.
    /// &amp;lt;/summary&amp;gt;
    public DateTime DateAdded { get; set; }
    #endregion
}&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Track class in PHP&lt;/h3&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
/**
 * Music track object.
 *
 * @author James Skemp
 */
class Track {
    /**
     * How long the track is.
     * @var string
     */
    var $Time;
    /**
     * Name or title of the track.
     * @var string
     */
    var $Name;
    /**
     * Name of the artist.
     * @var string
     */
    var $Artist;
    /**
     * Rating assigned to the track by the playlist&#39;s owner.
     * @var int
     */
    var $Rating;
    /**
     * Number of times the track has been played.
     * @var int
     */
    var $PlayCount;
    /**
     * Date and time the track was last played (and finished).
     */
    var $LastPlayed;
    /**
     * Name of the album the track is from.
     * @var string
     */
    var $Album;
    /**
     * True if the album the track is on is a compilation, false otherwise.
     * @var bool
     */
    var $Compilation;
    /**
     * Order this track is on the album.
     * @var int
     */
    var $TrackNumber;
    /**
     * Total number of tracks on the album.
     * @var int
     */
    var $TrackCount;
    /**
     * The album disc the track is on.
     * @var int
     */
    var $DiscNumber;
    /**
     * Total number of discs in the album.
     * @var int
     */
    var $DiscCount;
    /**
     * Year the track/album was released/published.
     * @var int
     */
    var $Year;
    /**
     * Genre of music the track falls into.
     * @var string
     */
    var $Genre;
    /**
     * Date and time the track was added.
     */
    var $DateAdded;
    
    //todo
}
?&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comments appreciated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manually updating CollabNet Subversion Server and TortoiseSVN</title>
      <link>http://words.strivinglife.com/post/Manually-updating-CollabNet-Subversion-Server-and-TortoiseSVN/</link>
      <pubDate>Tue, 27 Apr 2010 21:23:00 -0500</pubDate>
      
      <guid>http://words.strivinglife.com/post/Manually-updating-CollabNet-Subversion-Server-and-TortoiseSVN/</guid>
      <description>&lt;p&gt;With CollabNet releasing a new version of Subversion Server (1.6.11), and TortoiseSVN having a release a few days earlier, it&#39;s time to do an actual update, instead of a comment like I did &lt;a href=&#34;http://strivinglife.com/words/post/Installing-CollabNet-Subversion-Sever-163-and-TortoiseSVN-163-on-Windows-Server-2003.aspx&#34;&gt;last time&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Environment&lt;/h3&gt;
&lt;p&gt;I&#39;m currently running CollabNet Subversion Server version 1.6.9.1 on Windows 7 Home Premium, 64-bit.&lt;/p&gt;
&lt;p&gt;The install directory is C:\Program Filies (x86)\CollabNet\Subversion Server\, and I&#39;m installing version 1.6.9.11. These instructions should work, with minor changes, for other versions of CollabNet Subversion and Windows.&lt;/p&gt;
&lt;h3&gt;Backups and downloads&lt;/h3&gt;
&lt;p&gt;First make sure &lt;a href=&#34;http://strivinglife.com/words/post/Example-batch-file-to-dump-Subversion-repositories.aspx&#34;&gt;you&#39;ve backed up your repositories&lt;/a&gt;, just in case you need to roll back.&lt;/p&gt;
&lt;p&gt;Next &lt;a rel=&#34;external&#34; href=&#34;http://www.open.collab.net/products/subversion/getit.html&#34;&gt;download CollabNet Subversion Server&lt;/a&gt; for your environment. You can also go ahead and and start &lt;a rel=&#34;external&#34; href=&#34;http://tortoisesvn.net/downloads/&#34;&gt;downloading TortoiseSVN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Browse to the CollabNet Subversion Server install directory (C:\Program Filies (x86)\CollabNet\Subversion Server\ on my system) and make sure you make a backup of the Apache configuration file, httpd\conf\httpd.conf.&lt;/p&gt;
&lt;h3&gt;Upgrading CollabNet Subversion Server&lt;/h3&gt;
&lt;p&gt;In the CollabNet Subversion Server install directory open httpd\bin\ApacheMonitor.exe and stop the currently running instance of Apache, then exit out of Apache Monitor.&lt;/p&gt;
&lt;p&gt;Open the Services listing (Administrative Tools &amp;gt; Services) and stop CollabNet Subversion svnserve (or you won&#39;t be able to update any DLLs, without uninstalling first).&lt;/p&gt;
&lt;p&gt;Start the CollabNet Subversion Server installer and when prompt, click Yes to upgrade.&lt;/p&gt;
&lt;p&gt;Go ahead and click through the installer. Since we&#39;re upgrading, the settings should be just fine as they are.&lt;/p&gt;
&lt;p&gt;Start Apache Monitor back up, and start the instance, or just start the CollabNet Subversion Apache service (you can stop it via this as well).&lt;/p&gt;
&lt;p&gt;Test you can access the repository by browsing to it, if enabled, or going into a checked out repository and looking at the log.&lt;/p&gt;
&lt;h3&gt;Upgrading TortoiseSVN&lt;/h3&gt;
&lt;p&gt;Start the TortoiseSVN installer, clicking through &lt;a href=&#34;http://strivinglife.com/words/?tag=/tortoisesvn&#34;&gt;as usual&lt;/a&gt;. To finish, TortoiseSVN will require a restart.&lt;/p&gt;
&lt;p&gt;Once your system is back up, browse to a checked out directory and verify that you&#39;re able to use base functionality, even going so far as to commit changes to a test repository, as needed.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>