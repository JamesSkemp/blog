<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>General Programming on James Skemp&#39;s Test Hugo-Generated Site</title>
    <link>http://jamesskemp.github.io/words/categories/general-programming/</link>
    <description>Recent content in General Programming on James Skemp&#39;s Test Hugo-Generated Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Sep 2013 20:58:10 -0500</lastBuildDate>
    <atom:link href="http://jamesskemp.github.io/words/categories/general-programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Git/posh-git commands</title>
      <link>http://jamesskemp.github.io/words/post/Git-posh-git-commands/</link>
      <pubDate>Wed, 25 Sep 2013 20:58:10 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/post/Git-posh-git-commands/</guid>
      <description>&lt;p&gt;This is a rough list, in no particular order (yet), but here&#39;s the commands I&#39;ve found useful after being converted to posh-git after &lt;a href=&#34;https://plus.google.com/110143205597803895575/posts/Qk4Cfs5Yi9P&#34;&gt;my Google+ post&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add -u
    Add all changes (including deletions)

git rm &amp;lt;file&amp;gt;
    Stage file deletion.

git commit -m &#34;Message&#34;
    Commit with Message.

git push
    Push to GitHub

git status
    See what has changed/etcetera

git pull
    Pull from GitHub

git add &amp;lt;tab&amp;gt; &amp;lt;tab&amp;gt;
    Add multiple files, space delimited

git diff &amp;lt;file&amp;gt;
    Difference. Use Shift + Q to quit.

git reset HEAD &amp;lt;file&amp;gt;
    Unstage change.

git config -l
    List all configuration settings for the current repository.

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Brief thoughts after 1 month of GitHub</title>
      <link>http://jamesskemp.github.io/words/post/Brief-thoughts-after-1-month-of-GitHub/</link>
      <pubDate>Fri, 01 Mar 2013 08:18:00 -0600</pubDate>
      
      <guid>http://jamesskemp.github.io/words/post/Brief-thoughts-after-1-month-of-GitHub/</guid>
      <description>&lt;p&gt;I&#39;ve been using GitHub for a little more than a month now, and it&#39;s been about 2 weeks since I shut down the machine running my local Subversion instance.&lt;/p&gt;
&lt;p&gt;GitHub for Windows needs some work, but given that Phil Haack is/was working on the Windows aspect, I feel pretty confident that it&#39;ll continue to get better.&lt;/p&gt;
&lt;p&gt;Moving to a system that allows for public repositories also allowed me to publish some really old code, that might be of benefit to someone. However, I am now paying $7 a month something that I wasn&#39;t before. There is a free Git provider that I&#39;ve looked at (and that I might use as a backup), but there&#39;s a benefit to having everything in one place. And GitHub seems pretty solid in the Git space.&lt;/p&gt;
&lt;p&gt;&lt;a rel=&#34;external&#34; href=&#34;https://github.com/JamesSkemp&#34;&gt;View all my public repositories&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Importing an existing Web site into Subversion</title>
      <link>http://jamesskemp.github.io/words/post/Importing-an-existing-Web-site-into-Subversion/</link>
      <pubDate>Sun, 13 Jul 2008 11:30:00 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/post/Importing-an-existing-Web-site-into-Subversion/</guid>
      <description>&lt;p&gt;Last time, &lt;a href=&#34;http://jamesskemp.github.io/words/words/post/Playing-around-with-Subversion-with-a-test-repository.aspx&#34;&gt;I played around with Subversion&lt;/a&gt; in order to determine just how Subversion worked.&lt;/p&gt;
&lt;p&gt;This time I&#39;m actually going to create a repository for a site to store the current version, and work through making a couple of updates.&lt;/p&gt;
&lt;h3&gt;Existing site structure&lt;/h3&gt;
&lt;p&gt;The site that I&#39;ll be working with is &lt;a href=&#34;http://donotdenymyunicorn.com/&#34; target=&#34;_blank&#34;&gt;DoNotDenyMyUnicorn.com&lt;/a&gt;. It&#39;s a small, stable, site, that has just a few files. It&#39;s also relatively clean, with no previous versions floating about.&lt;/p&gt;
&lt;p&gt;The directory for the site currently exists on another box, at C:\inetpub\wwwroot\donotdenymyunicorn\ and consists of 8 files in that directory.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div&gt;index.html&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;main234x60.gif&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;print.css&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;robots.txt&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;screen.css&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;sitemap.xml&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;StrivingLifeGmail.png&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;(a Google-related file)&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;The new development structure&lt;/h3&gt;
&lt;p&gt;I won&#39;t be changing the structure of the site, but since I&#39;ll be moving the files to my Vista box, I&#39;ll have a slightly different structure.&lt;/p&gt;
&lt;p&gt;First, I&#39;ll be storing the repository at B:\repos\DoNotDenyMyUnicorn\&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;You&#39;ll note that I&#39;m using seperate repositories for each of my sites. However, I could create one repository for all my sites if I wanted to.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The development files will be stored at B:\projects\DoNotDenyMyUnicorn\&lt;/p&gt;
&lt;h3&gt;My workflow&lt;/h3&gt;
&lt;p&gt;Since I&#39;m the only one working on my sites, I&#39;ll be keeping things simple. I&#39;ll do all my development work in B:\projects\ and push files once they&#39;ve been tested and commited to the repository.&lt;/p&gt;
&lt;p&gt;Depending upon what issues I run into, this may change, but this is what I&#39;m planning for now.&lt;/p&gt;
&lt;h3&gt;Creating the repository&lt;/h3&gt;
&lt;p&gt;The first thing to do is create the repository we&#39;ll be using. The location of the repository will be B:\repos\DoNotDenyMyUnicorn\ , so the first thing to do is make sure that the directory exists. In my case, I need to create the DoNotDenyMyUnicorn folder.&lt;/p&gt;
&lt;p&gt;With that done, I can right-click on the DoNotDenyMyUnicorn folder and select TortoiseSVN &amp;gt; Create repository here... (type of Native filesystem, of course).&lt;/p&gt;
&lt;h3&gt;Creating the working/development directory&lt;/h3&gt;
&lt;p&gt;Now that I&#39;ve got the repository created, it&#39;s time to put data into it.&lt;/p&gt;
&lt;p&gt;As I said before, the development directory will be at B:\projects\DoNotDenyMyUnicorn\ .&lt;/p&gt;
&lt;p&gt;Now I have a couple of options. I can either import my existing content into Subversion, or I can create a working copy, add my data, and commit it.&lt;/p&gt;
&lt;p&gt;In this case I&#39;m going to create a working copy, since that makes more sense to me.&lt;/p&gt;
&lt;p&gt;So, I right-click on the DoNotDenyMyUnicorn directory in B:\repos\ and select SVN Checkout...&lt;/p&gt;
&lt;p&gt;I&#39;ll confirm that the URL is correct (file:///B:/repos/DoNotDenyMyUnicorn) and browse to the Checkout directory of B:\projects\DoNotDenyMyUnicorn .&lt;/p&gt;
&lt;p&gt;&lt;img title=&#34;Checking out a working copy&#34; src=&#34;http://media.strivinglife.com/graphics/svn_web/RepoCheckout_DNDMU.jpg&#34; alt=&#34;Checking out a working copy&#34; width=&#34;400&#34; height=&#34;278&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Pressing OK, I&#39;ve now got revision 0 in my projects directory.&lt;/p&gt;
&lt;p&gt;Next I&#39;ll grab the eight files from my XP machine, and copy them into B:\projects\DoNotDenyMyUnicorn\ .&lt;/p&gt;
&lt;p&gt;I can now either &#39;Add...&#39; each of the files I want under version control, or just right-click in/on the DoNotDenyMyUnicorn directory to select SVN Commit...&lt;/p&gt;
&lt;p&gt;Depending upon whether I already added the files, I may need to select the files I want added, but since I want them all, a simple check of &#34;Select / deselect all&#34; selects the eight files.&lt;/p&gt;
&lt;p&gt;I&#39;ll type a meaningful message (&#34;Initial check-in.&#34;) and press OK.&lt;/p&gt;
&lt;p&gt;This should add the 8 files, and create revision 1.&lt;/p&gt;
&lt;div class=&#34;tip&#34;&gt;
&lt;p&gt;If&amp;nbsp;you don&#39;t see any TortoiseSVN status icons on the file icons, you may try refreshing Explorer with F5.&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Making changes&lt;/h3&gt;
&lt;p&gt;Now there&#39;s just a few minor things that I want to change about the existing DoNotDenyMyUnicorn. I used Visual Studio 2008, but the editor doesn&#39;t really matter.&lt;/p&gt;
&lt;p&gt;Once I&#39;ve made my changes, I&#39;ll need to commit them to the repository.&lt;/p&gt;
&lt;div class=&#34;tip&#34;&gt;
&lt;p&gt;Remember that if you have multiple developers, it&#39;s a good&amp;nbsp;idea&amp;nbsp;to see if any other updates have taken place since your last update.&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is as simple as either committing the changes by selecting, or by committing the entire project directory (DoNotDenyMyUnicorn, in B:\projects\) and letting SVN take care of the rest.&lt;/p&gt;
&lt;p&gt;In my case I just had the one change.&lt;/p&gt;
&lt;p&gt;Once I committed, I pushed the changed files up to my remote Windows server.&lt;/p&gt;
&lt;p&gt;While doing so, I noticed that I had a favicon, that I didn&#39;t have on my devel site. Whoops.&lt;/p&gt;
&lt;p&gt;It was easy enough to download that into my project directory, and add/commit that to the repository.&lt;/p&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;While this doesn&#39;t handle trunks, branches, tags, or any of that other fun stuff, for a simple Web site, as &lt;a href=&#34;http://donotdenymyunicorn.com/&#34; target=&#34;_blank&#34;&gt;DoNotDenyMyUnicorn.com&lt;/a&gt; is, it&#39;s easy enough to move files into version control - much easier than I originally thought.&lt;/p&gt;
&lt;p&gt;However, while we didn&#39;t talk about it, it&#39;s a very good idea to make sure that you have clean directories, without temp files, previous versions, and &#39;correct&#39; directories. You can always exclude these from versioning, but a clean directory is a developer&#39;s favorite directory.&lt;/p&gt;
&lt;h3&gt;Next steps&lt;/h3&gt;
&lt;p&gt;My next steps are to move more of my sites into version control. Your next step should be to move one of your smaller sites, or &lt;a href=&#34;http://jamesskemp.github.io/words/words/post/Playing-around-with-Subversion-with-a-test-repository.aspx&#34;&gt;test Subversion out&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Playing around with Subversion with a test repository</title>
      <link>http://jamesskemp.github.io/words/post/Playing-around-with-Subversion-with-a-test-repository/</link>
      <pubDate>Sat, 12 Jul 2008 18:00:00 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/post/Playing-around-with-Subversion-with-a-test-repository/</guid>
      <description>&lt;p&gt;I&#39;ve flirted with source/version/revision control since September 2006 (with &lt;a href=&#34;http://jamesskemp.github.io/words/words/?tag=/subversion&#34;&gt;Subversion&lt;/a&gt;), but have never really dug in to actually do anthing with it. But now, that changes.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;The following guide was created using Subversion 1.4.6 and TortoiseSVN 1.4.8. However, this should still be applicable. Also, because of the number and size of the images, I&#39;ve limited the images shown directly in the guide. All links to these images should open in a new window.&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;The basics of Subversion&lt;/h3&gt;
&lt;p&gt;The basics are that you have a &lt;strong&gt;repository&lt;/strong&gt; to store files within. Files in the repository are not directly modified. Instead, you can &lt;strong&gt;check out&lt;/strong&gt; a working copy of the files to work on. You can then &lt;strong&gt;check in&lt;/strong&gt; (aka &lt;strong&gt;commit&lt;/strong&gt;) your working files, at any time, so that they become a part of the repository. When you do this, a new &lt;strong&gt;revision&lt;/strong&gt; is created. If multiple people are working on the same repository, you&#39;ll also need to &lt;strong&gt;update&lt;/strong&gt; your working files and handle any &lt;strong&gt;conflicts&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Getting started with Subversion&lt;/h3&gt;
&lt;p&gt;I&#39;ve already covered this in previous posts, for Windows installations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;&lt;a href=&#34;http://jamesskemp.github.io/words/words/post/Installing-Subversion-to-Windows-Vista.aspx&#34;&gt;Subversion&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;a href=&#34;http://jamesskemp.github.io/words/words/post/Installing-TortoiseSVN-to-Windows-Vista.aspx&#34;&gt;TortoiseSVN&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These both cover Windows Vista installations, but &lt;a href=&#34;http://jamesskemp.github.io/words/words/post/Installing-Subversion-and-TortoiseSVN-to-a-Windows-XP-Home-Edition-SP2-local-machine-with-Dreamweaver-8.aspx&#34;&gt;an older guide&lt;/a&gt; exists for Windows XP.&lt;/p&gt;
&lt;p&gt;TortoiseSVN isn&#39;t required, but I highly recommend it, and it&#39;s how I&#39;ll be working through this.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;Personally, I&#39;m a GUI&amp;nbsp;guy, for the most part. If I can have a GUI, I&#39;ll use it. Now if&amp;nbsp;I need to use the command line, or the command line will give me additional functionality, I&#39;ll use it (when I need to).&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Creating a test repository&amp;nbsp;&lt;/h3&gt;
&lt;p&gt;The first thing to try is a 100% test repository. Again, this will be what keeps track of file versions.&lt;/p&gt;
&lt;p&gt;Determine where you&#39;ll store your repositories. I have a second hard drive that I&#39;ll be using, so my repositories will be stored in B:\repos\ . Substitute your directory structure whenever you see this.&lt;/p&gt;
&lt;p&gt;Next, create a new directory under B:\repos\, called repoTest.&lt;/p&gt;
&lt;p&gt;Right click on the directory and select TortoiseSVN &amp;gt; Create repository here... (&lt;a href=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_01.jpg&#34; target=&#34;_blank&#34;&gt;See this&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;When prompted, select Native filesystem (FSFS) for the repository type. (&lt;a href=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_02.jpg&#34; target=&#34;_blank&#34;&gt;See this&lt;/a&gt;.)&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;From what I&#39;ve read, there doesn&#39;t seem to be any reason to choose Berkeley database (BDB) as the type, as it&#39;s perk is that it&#39;s been around for a while, and is therefore more stable, but it will definitely corrupt if you use it for a network share.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With that, the repository is created.&lt;/p&gt;
&lt;div class=&#34;warning&#34;&gt;
&lt;p&gt;Again, the repository is not updated directly. You can browse the repoTest directory to see what Subversion (SVN) has created, but don&#39;t mess with any of the files.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now that you&#39;ve got a repository, it&#39;s time to check out a version you can work with.&lt;/p&gt;
&lt;h3&gt;Creating a working directory&lt;/h3&gt;
&lt;p&gt;Right-click on the repoTest directory and select SVN Checkout... (&lt;a href=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_04.jpg&#34; target=&#34;_blank&#34;&gt;See this&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;You&#39;ll be prompted for the URL of the repository (which should be correct - in this case, &lt;strong&gt;file:///B:/repos/repotest&lt;/strong&gt;) and a Checkout directory. This directory is where you&#39;ll store your working copy. I created a new directory B:\projects\repoTest\.&lt;/p&gt;
&lt;p&gt;&lt;img title=&#34;Checking out from a repository&#34; src=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_05.jpg&#34; alt=&#34;Checking out from a repository&#34; width=&#34;466&#34; height=&#34;324&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Leave all other options as they are and press OK to continue.&lt;/p&gt;
&lt;p&gt;With that done, you should be shown a window stating that the checkout has finished.&lt;/p&gt;
&lt;p&gt;If you now browse to your checkout directory (in my case, B:\projects\) you&#39;ll notice that the repoTest directory has a new icon - a green circle with a check.&lt;/p&gt;
&lt;h3&gt;Adding files to the working directory&lt;/h3&gt;
&lt;p&gt;Let&#39;s now create a text file called &#39;file number 1.txt&#39; in the working directory. For now, leave the file blank.&lt;/p&gt;
&lt;p&gt;Now go back up to the B:\projects\ directory and right-click on the repoTest folder. Select SVN Commit... (&lt;a href=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_07.jpg&#34; target=&#34;_blank&#34;&gt;See this&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Our new file is displayed in the lower half of the window that appears. Check the box next to the file name. Next, enter a meaningful message in the first text box. For example, &#34;First check-in.&#34;&amp;nbsp; (&lt;a href=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_08.jpg&#34; target=&#34;_blank&#34;&gt;See this&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Press OK to continue.&lt;/p&gt;
&lt;p&gt;A new window will appear showing that our file has been added and sent. We&#39;re also given a revision number, in this case, 1. (&lt;a href=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_09.jpg&#34; target=&#34;_blank&#34;&gt;See this.&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Checking out another copy&amp;nbsp;&lt;/h3&gt;
&lt;p&gt;Now let&#39;s go back to our repository and checkout another copy.&lt;/p&gt;
&lt;p&gt;This simulates another user working on our repository.&lt;/p&gt;
&lt;p&gt;Once again, we can browse to B:\repos\ ,&amp;nbsp;right-click on our repoTest directory, and select SVN Checkout... Or, we can also select TortoiseSVN &amp;gt; Repo-browser . This browser enables you to see all the files in the repository, as well as additional details, like revision. (&lt;a href=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_11.jpg&#34; target=&#34;_blank&#34;&gt;See this.&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;If you right-click on the repository, you can select Checkout...&lt;/p&gt;
&lt;p&gt;Either way you checkout the repository, do so to a new folder, such as B:\projects\repoTest2\ . (&lt;a href=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_12.jpg&#34; target=&#34;_blank&#34;&gt;See this.&lt;/a&gt;)&amp;nbsp;Press OK.&lt;/p&gt;
&lt;p&gt;This checks out all files currently committed to the repository. So, when we browse to our new working directory, we&#39;ll see&amp;nbsp;&#39;file number 1.txt&#39; .&lt;/p&gt;
&lt;h3&gt;Where we&#39;re at&amp;nbsp;&lt;/h3&gt;
&lt;p&gt;Right now we&#39;ve&amp;nbsp;got&amp;nbsp;a single repository and two working directories. This is similar to what one might see if two individuals are working on a project.&lt;/p&gt;
&lt;p&gt;So,&amp;nbsp;Lisa is B:\projects\repoTest\ and Trish is B:\projects\repoTest2\&lt;/p&gt;
&lt;p&gt;Let&#39;s treat these imaginary users as human beings, and call them by there names from here on out.&lt;/p&gt;
&lt;h3&gt;Lisa&amp;nbsp;adds new files&lt;/h3&gt;
&lt;p&gt;Switch to Lisa&#39;s repository at B:\projects\repoTest\ . Let&#39;s&amp;nbsp;say she creates two new files, called &#34;file number 2.txt&#34; and &#34;file number 3.txt&#34;&amp;nbsp;in this directory.&lt;/p&gt;
&lt;p&gt;She also adds some text to file number 1, such as &#34;Lisa has made a modification to this file.&#34;&lt;/p&gt;
&lt;p&gt;When&amp;nbsp;she modifies file number 1, note that it now has a different icon, as the file has changed.&lt;/p&gt;
&lt;p&gt;Now we assume that she wants these to be a part of the repository, so in order to get them in there, she&#39;d have to commit these changes.&lt;/p&gt;
&lt;p&gt;Select&amp;nbsp;both of the new files&amp;nbsp;and select TortoiseSVN &amp;gt; Add...&lt;/p&gt;
&lt;p&gt;In the prompt that appears, verify both checkboxes next to the file names are selected, and press OK. You&#39;ll then be told that both files are added.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;If you still have the repository browser open, if you refresh the repository you&#39;ll note that the files haven&#39;t been added to the repository. Remember, additions still need to be committed.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You may have to refresh Explorer, but when you do so, you&#39;ll notice that the two new files have new icons - little blue plus signs.&lt;/p&gt;
&lt;p&gt;Right-click in the repoTest directory, or on the repoTest folder, and select SVN Commit...&lt;/p&gt;
&lt;p&gt;This time you&#39;ll see that you&#39;ve modified one file and added two others. Make sure you put in a message, such as &#34;Lisa updated file 1 and created files 2 and 3.&#34; You may note that when you type file, you&#39;ve got the option to auto-complete with the file names. Pretty nice, eh? (&lt;a href=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_19.jpg&#34; target=&#34;_blank&#34;&gt;See this.&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Go ahead and press OK, verify it completes, and press OK again. (&lt;a href=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_20.jpg&#34; target=&#34;_blank&#34;&gt;See this.&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;What about Trish?&lt;/h3&gt;
&lt;p&gt;Now Lisa is up to date with the repository, since she&#39;s the only one making changes. But what about Trish?&lt;/p&gt;
&lt;p&gt;Let&#39;s switch to Trish&#39;s directory, B:\projects\repoTest2\ . She still just has file number 1.txt and it&#39;s still empty.&lt;/p&gt;
&lt;p&gt;Let&#39;s go ahead and open her version of file number 1.txt and make a change. For example, add &#34;Trish modified this file.&#34;&lt;/p&gt;
&lt;p&gt;Right-click on the repoTest2 directory, or within it, and select SVN Commit... Make sure you enter a message!&lt;/p&gt;
&lt;p&gt;If you try to commit, the commit will fail. Unfortunately, Trish&#39;s version is out of date (it says so). (&lt;a href=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_22.jpg&#34; target=&#34;_blank&#34;&gt;See this.&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Getting Trish up-to-date&lt;/h3&gt;
&lt;p&gt;We have a couple of options for getting&amp;nbsp;Trish up-to-date. The first is to right-click on&amp;nbsp;&#39;file number 1.txt&#39; and select TortoiseSVN &amp;gt; Check for modifications. We&#39;ll see that&amp;nbsp;Trish&#39;s version has been modified, and by&amp;nbsp;double-clicking,&amp;nbsp;can see what&amp;nbsp;modifications took place.&lt;/p&gt;
&lt;p&gt;However, that&#39;s what was modified from the version she checked out.&lt;/p&gt;
&lt;p&gt;Press the Check repository button and you&#39;ll see an even newer version, the version Lisa checked out.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;In&amp;nbsp;this case, since I&#39;m/we&#39;re using the same machine, the User will be the same. However, if we were on different machines, or using different user accounts, the name would be different, and it would be easier to see who made the changes.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If we now double-click on the file we&#39;ll see Lisa&#39;s changes compared with our changes.&lt;/p&gt;
&lt;p&gt;So now that we&#39;ve got a conflict, what do we do?&lt;/p&gt;
&lt;p&gt;Let&#39;s&amp;nbsp;get an updated version of this file by right-clicking on the file and selecting&amp;nbsp;SVN Update.&lt;/p&gt;
&lt;p&gt;When we do so, we&#39;ll be told that a conflict exists, and will have a couple of&amp;nbsp;files created in our working directory - &#39;file number 1.txt.mine,&#39; &#39;file number 1.txt.r1,&#39; and &#39;file number 1.txt.r2.&#39;&amp;nbsp;In addition, &#39;file number 1.txt&#39; wll have a small warning icon.&lt;/p&gt;
&lt;p&gt;Right-click on this file and select TortoiseSVN &amp;gt; Edit conflicts.&lt;/p&gt;
&lt;p&gt;From within TortoiseMerge, we can right click on either of the differences and select a couple of options.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div&gt;Use a specific text block from one file or another.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Use the whole file from one or another.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Put our text before/after their text.&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The merged/final version will display in the bottom half of the window.&lt;/p&gt;
&lt;p&gt;For now, let&#39;s go ahead and put Lisa&#39;s text before Trish&#39;s text.&lt;/p&gt;
&lt;p&gt;Right click on the changed block from &#39;mine&#39;&amp;nbsp;and select &#39;Use text block from &#34;theirs&#34; before &#34;mine.&#34;&lt;/p&gt;
&lt;p&gt;&lt;img title=&#34;Merging changes&#34; src=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_25.jpg&#34; alt=&#34;Merging changes&#34; width=&#34;446&#34; height=&#34;153&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the merged version, you&#39;ll see Lisa&#39;s text before Trish&#39;s. Close out of TortoiseMerge and save your changes when prompted, or press the save icon, or select File &amp;gt; Save.&lt;/p&gt;
&lt;p&gt;Trish&#39;s working copy has now been modified with the updated text, however the file still is in conflict.&lt;/p&gt;
&lt;p&gt;Right-click on the file again and select TortoiseSVN &amp;gt; Resolved... Verify that &#39;file number 1.txt&#39; is checked, and press OK.&lt;/p&gt;
&lt;div class=&#34;warning&#34;&gt;
&lt;p&gt;Make sure the file really has been resolved. If you haven&#39;t created a merged version, the code SVN adds to the file will still remain. Because of this, it may be better to press the appropriate button in TortoiseMerge, after saving the document.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Once you&#39;ve done so, the extra files are removed from the directory. You&#39;ll now need to commit the file back into the repository. Now that the base copy is the same revision, the commit will complete.&lt;/p&gt;
&lt;h3&gt;What Trish should have done&lt;/h3&gt;
&lt;p&gt;However, there&#39;s still an issue with Trish&#39;s copy of the repository. She has no file 2 or 3.&lt;/p&gt;
&lt;p&gt;What Trish really needs to do is update her copy. She can do so by selecting SVN Update, after right-clicking on/in the repoTest2 folder.&lt;/p&gt;
&lt;p&gt;This will allow her to get all the updates that have happened since she first grabbed a copy.&lt;/p&gt;
&lt;p&gt;She can also, from this window, see a log (by pressing &#34;Show log...&#34;) of revisions, with messages.&lt;/p&gt;
&lt;h3&gt;Workflow with&amp;nbsp;more than one&amp;nbsp;developer&lt;/h3&gt;
&lt;p&gt;Therefore, based upon this, it&#39;s a very good idea to make sure you&#39;re pulling updates from the repository on a regular basis.&lt;/p&gt;
&lt;p&gt;While there may indeed be times when you don&#39;t want to do this, this will allow you to see what other developers have been working on.&lt;/p&gt;
&lt;p&gt;She can also use a number of menu items to check on the repository without making commits. The log (Show log), repository browser (Repo-browser), and&amp;nbsp;modifications (Check for modifications) can all be accessed at the directory or file level.&lt;/p&gt;
&lt;p&gt;In the case shown below, Lisa has made two additional revisions since Trish last checked files out, including adding two new files and modifying two that Trish already has.&lt;/p&gt;
&lt;p&gt;&lt;img title=&#34;Checking for changes&#34; src=&#34;http://media.jamesrskemp.com/graphics/repotest/repotest_38.jpg&#34; alt=&#34;Checking for changes&#34; width=&#34;685&#34; height=&#34;411&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If Trish hasn&#39;t made any changes, it&#39;s easy enough to SVN Update and get everything she needs. If she didn&#39;t modify any files that have changed, then she won&#39;t have to handle any merging of changes. If she has, then she&#39;ll just have to handle the conflict, which can involve just ignoring it by using her version (Mine), if she&#39;s actually got the version that should be used.&lt;/p&gt;
&lt;h3&gt;Deleting our working directories&lt;/h3&gt;
&lt;p&gt;At this point we&#39;ve covered what we need to cover for working with Subversion, using a test repository, and two working directories.&lt;/p&gt;
&lt;p&gt;We can clean-up by deleting the B:\projects\repoTest\ and B:\projects\repoTest2\ directories.&lt;/p&gt;
&lt;p&gt;Since our repository still exists, we can still get a working copy of the repository. However, if we delete the repository directory, B:\repos\repoTest\, our repository is gone.&lt;/p&gt;
&lt;p&gt;Since we don&#39;t need it anymore, go ahead and delete this directory.&lt;/p&gt;
&lt;h3&gt;To conclude ...&lt;/h3&gt;
&lt;p&gt;Probably the best way to start with Subversion is to actually work on a dummy repository, as I&#39;ve done above.&lt;/p&gt;
&lt;h3&gt;Next time&lt;/h3&gt;
&lt;p&gt;Next time I&#39;ll move an existing Web project into Subversion, since it&#39;s definitely time.&lt;/p&gt;
&lt;p&gt;Questions, comments, concerns, definitely appreciated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Review of Steve Krug&#39;s Don&#39;t Make Me Think: 2nd Edition (with notes)</title>
      <link>http://jamesskemp.github.io/words/post/Review-of-Steve-Krugs-Dont-Make-Me-Think-2nd-Edition-%28with-notes%29/</link>
      <pubDate>Fri, 28 Sep 2007 15:00:00 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/post/Review-of-Steve-Krugs-Dont-Make-Me-Think-2nd-Edition-%28with-notes%29/</guid>
      <description>&lt;p&gt;
As it promises, &lt;a href=&#34;http://www.amazon.com/gp/product/0321344758?tag=strivinglifen-20&#34; target=&#34;_blank&#34;&gt;Steve Krug&amp;#39;s &lt;em&gt;Don&amp;#39;t Make Me Think: 2nd Edition&lt;/em&gt;&lt;/a&gt;, is a quick, but extremely usable, guide to Web usability and design. The book took me less than a day to read (less than 3 hours total over the days of September 26 and 27, of 2007), but has become, in my mind, a requirement for even beginners (like myself) of Web design. Since everyone who develops for the Web should have some idea of design and usability, this book should really be a mandatory requirement for said work. 
&lt;/p&gt;
&lt;p&gt;
In short, there&amp;#39;s no reason not to read this book if you&amp;#39;re developing for the Web (writing content, programming, etcetera), or working with a team that does so. 
&lt;/p&gt;
&lt;h3&gt;Notes on the book&lt;/h3&gt;
&lt;p&gt;
The following are notes that I took while reading the book. They are broken up by chapter. These notes will &lt;strong&gt;not&lt;/strong&gt; replace a reading of the book. 
&lt;/p&gt;
&lt;h4&gt;Chapter 1&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Eliminate question marks - &amp;quot;what does this do?&amp;quot; ...&lt;/li&gt;
    &lt;li&gt;use common language&lt;/li&gt;
    &lt;li&gt;keep things obvious&lt;br /&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chapter 2&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;satisficing - first, best, option 
    &lt;ul&gt;
        &lt;li&gt;guessing&lt;/li&gt;
        &lt;li&gt;back button most used browser feature&lt;/li&gt;
    &lt;/ul&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chapter 3&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;billboard design&lt;/li&gt;
    &lt;li&gt;clear visual hierarchy 
    &lt;ul&gt;
        &lt;li&gt;size, grouping, nesting&lt;br /&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;use conventions&lt;/li&gt;
    &lt;li&gt;clearly define page areas&lt;/li&gt;
    &lt;li&gt;make clickable areas obvious&lt;/li&gt;
    &lt;li&gt;minimize noise 
    &lt;ul&gt;
        &lt;li&gt;busyness&lt;/li&gt;
        &lt;li&gt;background noise&lt;/li&gt;
        &lt;li&gt;&lt;em&gt;everything&lt;/em&gt; is noise until proven otherwise&lt;br /&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;replace text with a foreign language - does it still make sense (where things are)?&lt;br /&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chapter 5&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;get rid of happy-talk - they&amp;#39;re not going to read it, but they may think they have to ... (but they still won&amp;#39;t read it)&lt;/li&gt;
    &lt;li&gt;kill instructions&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chapter 6&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;navigation = getting from one place to another = figuring out where you are&lt;br /&gt;
    &lt;/li&gt;
    &lt;li&gt;navigation &lt;em&gt;reveals content&lt;/em&gt;&lt;/li&gt;
    &lt;li&gt;presistent navigation - comfort for user; it&amp;#39;ll be here, but it may change&lt;/li&gt;
    &lt;li&gt;simpler navigation for forms and the like (where they need to perform a specific action)&lt;/li&gt;
    &lt;li&gt;common elements; home, search, sections (nav), utilities (help use site: about us, contact, help, site map), site id/logo, title, indication of where you are&lt;/li&gt;
    &lt;li&gt;home page != sub pages&lt;/li&gt;
    &lt;li&gt;let people filter results (simple search) - more useful at that point (instead of before you even search)&lt;/li&gt;
    &lt;li&gt;you need to know navigation from top-level to bottom-most level (id est, don&amp;#39;t stop mocking up at the second or third level, keep going as necessary)&lt;/li&gt;
    &lt;li&gt;every page needs aname - largest text&lt;/li&gt;
    &lt;li&gt;visual cues of where you are can&amp;#39;t be subtle; maybe two things, not just one&lt;/li&gt;
    &lt;li&gt;breadcrumbs were an oddity - not a substitute for two levels of main nav 
    &lt;ul&gt;
        &lt;li&gt;move them out of page - don&amp;#39;t let them conflict with primary nav&lt;br /&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;tabs are self-evident, like the Recycle Bin on computes to delete files 
    &lt;ul&gt;
        &lt;li&gt;connect w/ secondary nav (like real life) 
        &lt;ul&gt;
            &lt;li&gt;have one tab selected by default&lt;br /&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;don&amp;#39;t rely on color as the only cue&lt;/li&gt;
    &lt;li&gt;&amp;#39;trunk&amp;#39; test: look at a page from a distance, or with nonsense text 
    &lt;ul&gt;
        &lt;li&gt;what site am I on?&lt;/li&gt;
        &lt;li&gt;what page?&lt;/li&gt;
        &lt;li&gt;what/where are the major sections?&lt;/li&gt;
        &lt;li&gt;options at this level?&lt;/li&gt;
        &lt;li&gt;where am I in scheme of things?&lt;/li&gt;
        &lt;li&gt;search/find?&lt;br /&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chapter 7 (home pages)&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;common elements 
    &lt;ul&gt;
        &lt;li&gt;site identity/mission&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
        &lt;li&gt;site hierarchy&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
        &lt;li&gt;search&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
        &lt;li&gt;teaser&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
        &lt;li&gt;timely content&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
        &lt;li&gt;deals&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
        &lt;li&gt;shortcuts&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
        &lt;li&gt;registration&lt;/li&gt;
    &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;show me what I&amp;#39;m looking for (and what I&amp;#39;m not looking for)&lt;br /&gt;
    &lt;/li&gt;
    &lt;li&gt;show me where to start&lt;/li&gt;
    &lt;li&gt;establish credibility and trust&lt;/li&gt;
    &lt;li&gt;must appeal to all visitors&lt;/li&gt;
    &lt;li&gt;?s: what is this?, what can I do here? what do they have here? why should I be here and not elsewhere? where do I start?&lt;/li&gt;
    &lt;li&gt;tagline and brief, blocked, welcome blurb 
    &lt;ul&gt;
        &lt;li&gt;tagline = value proposition (like &amp;#39;the single best source for facts on the net&amp;#39;)&lt;br /&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;max of four features (to point out)&lt;/li&gt;
    &lt;li&gt;should be able to answer where to start to search, browse, sample (the best)&lt;/li&gt;
    &lt;li&gt;nav layout changes are oaky, but don&amp;#39;t change the order (home page vs. sub-pages) &lt;br /&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chapter 8&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;there is no average user&lt;/li&gt;
    &lt;li&gt;there is no average user :D&lt;/li&gt;
    &lt;li&gt;Web teams don&amp;#39;t argue about big things (usually), just the minor issues (and these may not have right answers)&lt;/li&gt;
    &lt;li&gt;testing is a good thing - get people to use proposed idea(s) and &lt;em&gt;see&lt;/em&gt; how it &lt;em&gt;really&lt;/em&gt; functions&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chapter 9&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;focus groups vs. usability testing 
    &lt;ul&gt;
        &lt;li&gt;focus groups = group; wants, needs, likes &amp;gt; marketing; do it early, not late in the game (do it before you start designing)&lt;br /&gt;
        &lt;/li&gt;
        &lt;li&gt;usability testing = individual, task based; whether site &lt;em&gt;works&lt;/em&gt;&lt;br /&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;if people are getting lost, don&amp;#39;t add more text - remove (distractions/noise)&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chapter 10&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;keep photos/figures in print-friendly pages, but don&amp;#39;t include nav, ...&lt;br /&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Chapter 11&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;easy accessibility (first steps) 
    &lt;ul&gt;
        &lt;li&gt;add alt tags to images&lt;/li&gt;
        &lt;li&gt;use labels in forms&lt;/li&gt;
        &lt;li&gt;skip to main content link (before any other content)&lt;/li&gt;
        &lt;li&gt;make all content accessible by keyboard&lt;/li&gt;
        &lt;li&gt;don&amp;#39;t use JS without a good reason&amp;nbsp;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&amp;nbsp;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse SDK 3.2.2 to Ubuntu 7.04</title>
      <link>http://jamesskemp.github.io/words/post/Eclipse-SDK-322-to-Ubuntu-704/</link>
      <pubDate>Tue, 12 Jun 2007 07:30:00 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/post/Eclipse-SDK-322-to-Ubuntu-704/</guid>
      <description>&lt;p&gt;
Having already &lt;a href=&#34;http://strivinglife.net/wordpress/2007/06/11/366/installing-suns-java-development-kit-50-update-12-on-ubuntu-704/&#34;&gt;installed JDK 5.0 on Ubuntu&lt;/a&gt;, it&amp;#39;s time to install what I really wanted in the first place - Eclipse.
&lt;/p&gt;
&lt;p&gt;
The first thing to do is download the current version from http://www.eclipse.org/downloads/. Again, this is something we could grab from a repo, but if I&amp;#39;m using Linux, I may as well have control.
&lt;/p&gt;
&lt;p&gt;
Why Eclipse? No Dreamweaver for Ubuntu.
&lt;/p&gt;
&lt;p&gt;
After saving it to the Desktop, and after it&amp;#39;s download, I opened up a Terminal.
&lt;/p&gt;
&lt;p&gt;
cd ~/Desktop
&lt;/p&gt;
&lt;p&gt;
sudo mv eclipse /usr/lib (to move the Eclipse directory).
&lt;/p&gt;
&lt;p&gt;
sudo update-alternatives --install /usr/bin/eclipse /usr/lib/eclipse/eclipse 300
&lt;/p&gt;
&lt;p&gt;
sudo ln -s /usr/lib/eclipse/startup.jar /usr/bin
&lt;/p&gt;
&lt;p&gt;
Adding it to the menu involves right clicking on the Applications item in the menu, and selecting Edit Menus.
&lt;/p&gt;
&lt;p&gt;
Add a New Item under whatever menu (for example, Programming). Browse for an icon (/usr/lib/eclipse/icon.xpm), enter &lt;strong&gt;eclipse&lt;/strong&gt; into Command, and whatever makes the most sense for Name and Comment.
&lt;/p&gt;
&lt;p&gt;
We still have to install Apache, at least, and because I am who I am, ColdFusion as well.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Version control systems - any suggestions?</title>
      <link>http://jamesskemp.github.io/words/post/Version-control-systems-any-suggestions/</link>
      <pubDate>Thu, 14 Sep 2006 18:37:00 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/post/Version-control-systems-any-suggestions/</guid>
      <description>&lt;p&gt;Version control is something that I&#39;ve been interested in for the past several months (actually, what month is it, September? I guess it&#39;s been longer than just a couple of months) but that I haven&#39;t been able to dig into as much as I&#39;d like.&lt;/p&gt;
&lt;p&gt;Subversion keeps coming up as a good piece of software, with the addition of Trac. Since I wrote the guide to installing Apache 2.0.x a bit ago, I have no reason for not getting started with Subversion.&lt;/p&gt;
&lt;p&gt;Today, from somewhere, I was directed to SyntEvo&#39;s product, SmartSVN. Right now I&#39;m using WinMerge (very happily) for my file compare utility at both home and during the &#39;8-5&#39;, but SyntEvo seems to have a fairly nice utility itself, albeit at a steep (at least, as a small-time developer who finds WinMerge to be exactly what I need) price.&lt;/p&gt;
&lt;p&gt;Since I&#39;ve had good luck with asking questions and getting answers before, I&#39;m going to throw some product names around, and see if I can get some recommendations. I&#39;ve dug around Google enough that I know there&#39;s a lot to choose from, but sometimes digging through a lot of content makes it hard to pick a direction.&lt;/p&gt;
&lt;p&gt;That said, any thoughts/recommendations/reviews/rants/raves on the following products?&lt;/p&gt;
&lt;p&gt;Subversion, Trac, SmartSVN, SmartCVS, SyntEvo (company name, but it still gets thrown in), version control systems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logical coding</title>
      <link>http://jamesskemp.github.io/words/post/Logical-coding/</link>
      <pubDate>Sun, 28 May 2006 08:49:00 -0500</pubDate>
      
      <guid>http://jamesskemp.github.io/words/post/Logical-coding/</guid>
      <description>&lt;p&gt;
When it comes to proper coding, you should know the most important rule of all; LIFO. However, not even LIFO nor the W3C can really tell you which order to put certain elements. In the nature of Web 2.0, I&amp;#39;ll discuss some of the standards I&amp;#39;ve been bouncing around for HTML text markup when the same text is given multiple attributes.
&lt;/p&gt;
&lt;!--adsense--&gt;
&lt;p&gt;
&lt;strong&gt;LIFO&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
LIFO - or last in, first out - states that that which is last stated is dismissed first. So, to take some empty ColdFusion code;
&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;
    &amp;lt;cfif x = y&amp;gt;&lt;br /&gt;
    &amp;nbsp;&amp;nbsp;&amp;lt;cfif y LTE z&amp;gt;&lt;br /&gt;
    &amp;nbsp;&amp;nbsp;&amp;lt;/cfif&amp;gt;&lt;br /&gt;
    &amp;nbsp;&amp;nbsp;&amp;lt;cfif y GT z&amp;gt;&lt;br /&gt;
    &amp;nbsp;&amp;nbsp;&amp;lt;/cfif&amp;gt;&lt;br /&gt;
    &amp;lt;/cfif&amp;gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Here, we have opened an if-statement. We then opened another if-statement within our first, closed the second, opened a third, closed the third, and closed the first.
&lt;/p&gt;
&lt;p&gt;
We also do LIFO in simple code. For example, to create text like &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;,
&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;
    &amp;lt;strong&amp;gt;&amp;lt;em&amp;gt;this&amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
To be proper, we must close the emphasis before we close the strong tag. If we did the following, we&amp;#39;d be wrong. 
&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;
    &amp;lt;strong&amp;gt;&amp;lt;em&amp;gt;this&amp;lt;/strong&amp;gt;&amp;lt;/em&amp;gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;strong&gt;Applying multiple attributes to the same block of stuff&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
In our previous example, where we place both emphasis and bold on the same group of text, we run into a bit of a question; which comes first? Do we place emphasis on the fact that the text is bold, or bold the emphasis on the text? I argue that we do the latter. 
&lt;/p&gt;
&lt;p&gt;
Before we tackle this one, let&amp;#39;s tackle an easier one; a bold link.
&lt;/p&gt;
&lt;p&gt;
In such a case we would have an &amp;lt;a&amp;gt; and a &amp;lt;strong&amp;gt;. Does one preempt the other when they apply to the same thing?
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;If we have a paragraph that has bolded, with a &lt;a href=&#34;#&#34;&gt;link&lt;/a&gt; within it, then the ordering is natural.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;#&#34;&gt;The question is, is there any case where a word would be &lt;strong&gt;bold&lt;/strong&gt;, but the entire paragraph would be a link?&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Since we can apply a style on a link, namely font-weight:bold, it&amp;#39;s possible that bold text within a link could not be seen. By doing so, we risk the chance that the link would be lost. Logically, we can also ask whether we are linking the bold text, or just the text. In some cases, we may want to bold a particular word. For example;
&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;
    &lt;a href=&#34;#&#34;&gt;Download the &lt;strong&gt;PDF&lt;/strong&gt; version of the document.&lt;/a&gt;&lt;br /&gt;
    &lt;a href=&#34;#&#34;&gt;Download the &lt;strong&gt;Word&lt;/strong&gt; version of the document.&lt;/a&gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Yet, that is not within the scope of what we&amp;#39;ve asked.
&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;
    &lt;strong&gt;&lt;a href=&#34;#&#34;&gt;Download the PDF.&lt;/a&gt;&lt;/strong&gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
In such a case, we are calling attention to the fact that there is a link where you can download the PDF. Therefore, when we code this, we do it as follows.
&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;
    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Download the PDF.&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
We&amp;#39;re not giving emphasis to some text within the link, we&amp;#39;re giving emphasis to the fact that there is a link. So, if we were to look at &amp;lt;a&amp;gt; and &amp;lt;em&amp;gt;, we would thereby put the &amp;lt;em&amp;gt; surrounding the &amp;lt;a&amp;gt;. 
&lt;/p&gt;
&lt;p&gt;
Going back to our emphasis / strong question, on which do we apply which? For both, we can use styles to remove the usage of &amp;lt;strong&amp;gt; and &amp;lt;em&amp;gt; altogether. However, if we do use both, in which order? As I stated above, I argue that we bold the emphasis.
&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;
    &lt;strong&gt;Deadline ends August 2006.&lt;/strong&gt;
    &lt;/p&gt;
    &lt;p&gt;
    &lt;em&gt;Deadline ends August 2006.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
    &lt;strong&gt;&lt;em&gt;Deadline ends August 2006.&lt;/em&gt;&lt;/strong&gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Really, though, it depends upon which of the first two we would do if we could only do one or the other. Do we give it emphasis, or do we bold it? In both cases, we&amp;#39;re giving the text emphasis. As I see it, by using &amp;lt;em&amp;gt; we&amp;#39;re using emphasis within the text, while using a &amp;lt;strong&amp;gt; gives a style emphasis. That is, in most paperbacks, &amp;lt;em&amp;gt; is used. It&amp;#39;s rare to see bolded text. However, bold text is used for layout emphasis; to call attention to something outside of where one would look in the natural course of affairs (so to speak).
&lt;/p&gt;
&lt;p&gt;
Given that view, we &amp;lt;strong&amp;gt; the &amp;lt;em&amp;gt;, or bold the emphasis. 
&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;
    &amp;lt;strong&amp;gt;&amp;lt;em&amp;gt;Deadline ends August 2006.&amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Obviously, if we&amp;#39;re only bolding a portion of the emphasis, or giving emphasis to a portion of bold text, then we would follow LIFO.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Given the above, I&amp;#39;ve now argued that when it comes to &amp;lt;strong&amp;gt;, &amp;lt;em&amp;gt;, and &amp;lt;a&amp;gt; surrounding exactly the same text, the order of placement should be as follows;
&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;
    &amp;lt;strong&amp;gt; &amp;lt;em&amp;gt; &amp;lt;a&amp;gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Otherwise, LIFO always gets priority. 
&lt;/p&gt;
&lt;p&gt;
Comments on this conclusion are indeed welcome.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
