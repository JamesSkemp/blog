<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Development on James Skemp&#39;s StrivingLife</title>
    <link>http://words.strivinglife.com/tags/web-development/</link>
    <description>Recent content in Web Development on James Skemp&#39;s StrivingLife</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Feb 2010 13:25:00 -0600</lastBuildDate>
    <atom:link href="http://words.strivinglife.com/tags/web-development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Web Application Development Guidelines</title>
      <link>http://words.strivinglife.com/post/Web-Application-Development-Guidelines/</link>
      <pubDate>Sat, 27 Feb 2010 13:25:00 -0600</pubDate>
      
      <guid>http://words.strivinglife.com/post/Web-Application-Development-Guidelines/</guid>
      <description>&lt;p&gt;&lt;p&gt;While Web application development is just as complex as other application development, if not more so, it&amp;rsquo;s fairly difficult to find information on best practices while doing Web development.&lt;/p&gt;
&lt;p&gt;In order to move towards implementation of Subversion, I needed to write up documentation on how we&amp;rsquo;d use it. After a couple drafts, which I ended up scrapping almost completely, I came up with the below.&lt;/p&gt;
&lt;p&gt;In the interest of sharing, I&amp;rsquo;ve included the full document below, after removing the few instances where I had to specify a non-Subversion application (our help desk application). Comments and suggestions are appreciated.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;WebAppDevGuidelines&#34;&gt;
&lt;h3&gt;Web application development guidelines&lt;/h3&gt;
&lt;h4&gt;Purpose&lt;/h4&gt;
&lt;p&gt;The purpose of this document is to outline the development process for all Web applications.&lt;/p&gt;
&lt;p&gt;Any concerns that arise that are not covered by this document should be brought to the attention of the core development team, analyzed and answered, and added to this document.&lt;/p&gt;
&lt;h4&gt;Contents&lt;/h4&gt;
&lt;ul style=&#34;list-style-type:disc;&#34;&gt;
&lt;li&gt;Overview of development process for new or upgraded functionality&lt;/li&gt;
&lt;li&gt;Server usage - Development/Staging/Production&lt;/li&gt;
&lt;li&gt;Development planning and steps&lt;/li&gt;
&lt;li&gt;Code testing procedures&lt;/li&gt;
&lt;li&gt;Version control usage&lt;/li&gt;
&lt;li&gt;Bug collection and fixing&lt;/li&gt;
&lt;li&gt;Finalizing code and pushing to production&lt;/li&gt;
&lt;li&gt;Revision history&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Overview of development process for new or upgraded functionality&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;New or changed functionality outlined
&lt;ul&gt;
&lt;li&gt;If the changed functionality is a bug fix to production code, the normal process of reporting bugs (see &lt;em&gt;Bug collection and fixing&lt;/em&gt;) should be followed. See also &lt;strong&gt;steps 10 to 14&lt;/strong&gt; below.&lt;/li&gt;
&lt;li&gt;Otherwise if the changes are a project, before any development can begin, the following must be created and approved; an official written request for a change to existing functionality, or new functionality, and wireframe(s) containing all displayed elements and functionality,&lt;/li&gt;
&lt;li&gt;Based on the approved request and wireframes a project plan will be created that includes pieces of functionality that will be created and timelines for creating them.&lt;/li&gt;
&lt;li&gt;Once the project plan has been approved, actual development can begin.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Development planning
&lt;ul&gt;
&lt;li&gt;While already outlined during step 1, actual planning of data and design should begin at this point.&lt;/li&gt;
&lt;li&gt;When possible, the data should be the first point of reference, with the data access being the next point, and output for the user being the last.&lt;/li&gt;
&lt;li&gt;Any changes to elements contained in step 1 at or after this point will necessitate that development restart at this point again, with a re-evaluation of the existing plan.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a new branch for development
&lt;ul&gt;
&lt;li&gt;As it&amp;rsquo;s always possible for changes to need to be made to existing functionality while new functionality is being developed, generally a new &lt;a href=&#34;#DefinitionBranch&#34;&gt;branch&lt;/a&gt; should be created for projects. This insures that in case production is lost, we can easily re-build it from source control.&lt;/li&gt;
&lt;li&gt;An abbreviated version of the project name should be used when creating the branch.&lt;/li&gt;
&lt;li&gt;Generally all users can use the same branch for development, as ideally nothing should be moved into production until everything is.
&lt;ul&gt;
&lt;li&gt;Exceptions are allowed, such as in the case of the data structure, once it has been finalized. However, realistically this should be done only for completely new functionality (as opposed to updating a table), since moving back to &lt;strong&gt;step 1&lt;/strong&gt; is always a possibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write code
&lt;ul&gt;
&lt;li&gt;Develop code for a set piece of functionality.
&lt;ul&gt;
&lt;li&gt;Code includes all dynamic and static code, such as HTML, ASP.NET, CSS, JavaScript, SQL queries, and etcetera.&lt;/li&gt;
&lt;li&gt;Whenever possible data should be chunked into the smallest testable part possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Initial test of code on development server
&lt;ul&gt;
&lt;li&gt;A quick test of code should be performed to insure that it builds (if applicable) and works. If it does not, return to &lt;strong&gt;step 4&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;All testing should be done on the development server only.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code check-in
&lt;ul&gt;
&lt;li&gt;Once functionality has been written and works at a basic level, code must be checked into source control.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write additional code
&lt;ul&gt;
&lt;li&gt;Return to &lt;strong&gt;step 5&lt;/strong&gt; for each functionality item that must be created before robust testing can occur.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing on staging server
&lt;ul&gt;
&lt;li&gt;Once functionality has been written and initial tests have passed to an acceptable level, code should be published to the staging server for user testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bug collection
&lt;ul&gt;
&lt;li&gt;All user feedback from step 8 should be collected, preferably by a single source, and perused by the development team as a whole.&lt;/li&gt;
&lt;li&gt;Bugs should be categorized by priority, with those impacting functionality by default having a higher priority than all other concerns.&lt;/li&gt;
&lt;li&gt;When possible, bugs should be broken into functional groups and tested separately.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bug fixes on development server
&lt;ul&gt;
&lt;li&gt;Bugs are corrected and new versions of the application are pushed to the development server for testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code check-in
&lt;ul&gt;
&lt;li&gt;Once bugs have been corrected and testing has occurred, code must be checked into version control.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing on staging server (iteration &lt;em&gt;x&lt;/em&gt;)
&lt;ul&gt;
&lt;li&gt;Code is once again published to the staging server for user testing once again. General testing should once again be performed, in addition to bug fix testing.&lt;/li&gt;
&lt;li&gt;Return to &lt;strong&gt;step 9&lt;/strong&gt; as needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Release finalized
&lt;ul&gt;
&lt;li&gt;Once testing has finished, and all bugs have been squashed, release should be finalized.&lt;/li&gt;
&lt;li&gt;If the new functionality is sufficient in scope, the release code should be uniquely tagged.&lt;/li&gt;
&lt;li&gt;The go-live date should be discussed and finalized, with a soft-launch preferred when possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functionality pushed to production server(s)
&lt;ul&gt;
&lt;li&gt;On the go-live date the new functionality should be published to production.&lt;/li&gt;
&lt;li&gt;The first part of the publication process is to merge the branch used for development into the main trunk of code. At that point that can be used to publish to the production server(s).
&lt;ul&gt;
&lt;li&gt;If desired, the release currently on production can be tagged first, to ease on rolling back.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If more than one production server is involved, code should be pushed to one server at a time.&lt;/li&gt;
&lt;li&gt;Testing should occur immediately after the push and any bugs should be evaluated for severity. If necessary, production servers can be removed from rotation, or a previous version published.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Server usage &amp;ndash; Development/Staging/Production&lt;/h4&gt;
&lt;p&gt;To insure that development can occur without impacting existing processes, the following server guidelines should be followed.&lt;/p&gt;
&lt;h5&gt;Development server&lt;/h5&gt;
&lt;p&gt;A development server should be used for development of new or updated functionality. A development server should be accessible to only those who develop this functionality or those who perform early testing. In practice, this should only be internal staff on the Web team.&lt;/p&gt;
&lt;h5&gt;Staging server&lt;/h5&gt;
&lt;p&gt;A staging server should be used once developed functionality is ready for final user testing. A staging server should be accessible to any users who will need to test functionality before it can be pushed to production, and therefore this server should be accessible outside the organization.&lt;/p&gt;
&lt;p&gt;Access to the code directories should be accessible only to the smallest subset of developers.&lt;/p&gt;
&lt;p&gt;Changes should &lt;em&gt;never&lt;/em&gt; be made on, or pushed to, the staging server without first being tested on the development server, no matter how minor (this includes changes to images that are part of the template).&lt;/p&gt;
&lt;h5&gt;Production server&lt;/h5&gt;
&lt;p&gt;A production server contains the finalized version of all code. Production servers are accessible to all users and may contain new content or data.&lt;/p&gt;
&lt;p&gt;Like a staging server, the code directories should be accessible only to the smallest subset of developers.&lt;/p&gt;
&lt;p&gt;Changes &lt;em&gt;can&lt;/em&gt; be pushed to the production server without going through development and staging, but only in the case of static content like user edited images and content. This content should be limited, however, to pre-determined locations, and should be copied down to the development server on a regular basis.&lt;/p&gt;
&lt;h4&gt;Development planning and steps&lt;/h4&gt;
&lt;h5&gt;Planning&lt;/h5&gt;
&lt;p&gt;Once the requirements, wireframe(s) (if necessary for the project) and project plan have all been approved, general development planning can begin.&lt;/p&gt;
&lt;p&gt;Generally planning should move from the data to the display. This suggest that generally the necessary data storage and procedures should be setup first, objects and methods should be built on top of that, output should be created next, and finally the output should be styled.&lt;/p&gt;
&lt;p&gt;If possible, a discussion on display should be done early, based on the wireframe(s) provided.&lt;/p&gt;
&lt;h5&gt;Development steps&lt;/h5&gt;
&lt;p&gt;Again, assuming that development will move from the data to the display of that data, the following will be the general flow of development.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new &lt;a href=&#34;#DefinitionBranch&#34;&gt;branch&lt;/a&gt; should be created for the code. All code in the following steps will be placed within this branch.
&lt;ul&gt;
&lt;li&gt;By creating a branch we insure that all changes are tied together and can be made without impacting any other changes.&lt;/li&gt;
&lt;li&gt;The branch should be named using an abbreviated version of the project name, with expanded notes entered when creating the branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If applicable, the requirements and wireframes should be reviewed in order to determine the data structure that makes the most sense. This should also include any SQL views and procedures necessary to interact with the data.
&lt;ul&gt;
&lt;li&gt;In order to be finalized, the views and procedures should be fully tested.&lt;/li&gt;
&lt;li&gt;Scripts to setup the tables, views, procedures, and etcetera should be saved and placed under source control, in the branch created in &lt;strong&gt;step 1&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Once the data structure and interactivity with this structure has been finalized, the objects and methods the Web application will implement should be setup.
&lt;ul&gt;
&lt;li&gt;Whenever possible this functionality should be created in such a way that it can be tested via a test page or application. Such a page/application should be used for testing only, and should &lt;em&gt;not&lt;/em&gt; be re-purposed for production usage (but can remain for testing purposes).&lt;/li&gt;
&lt;li&gt;Once this functionality has been finalized, the code for it should be placed under source control.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;As soon as the objects and methods to interactive with the data have been created, and basic testing has been performed, the user display should be evaluated from the wireframe(s) and outlined.
&lt;ul&gt;
&lt;li&gt;Styles, classes, and ids do not generally need to be determined at this time, but higher-level elements (block versus inline) should be.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;With a basic understanding of how the output will be styled, development on displaying the data can begin.
&lt;ul&gt;
&lt;li&gt;Whenever possible, functionality should be broken up into smaller chunks and tested, so that it can be checked into source control as soon as possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Once the necessary data is displaying, the display should be styled per the wireframe(s), following styling standards.&lt;/li&gt;
&lt;li&gt;Once all data is displaying and styled correctly, the code should be published to the staging server and testing can begin.&lt;/li&gt;
&lt;li&gt;Once testing results have been received, compiled, and evaluated, any necessary bug fixes should be made.
&lt;ul&gt;
&lt;li&gt;Again, whenever possible changes should be made to self-contained blocks and tested, with the changes checked into source control.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Previous steps should repeat until all bugs have been fixed or deferred.&lt;/li&gt;
&lt;li&gt;Once all bugs have been resolved a go-live date should be set.&lt;/li&gt;
&lt;li&gt;Shortly before the go-live date is reached an evaluation should be made on whether changes impact the project&amp;rsquo;s branch. If so, these changes should be merged into the branch before the go-live date.&lt;/li&gt;
&lt;li&gt;When the go-live date is reached, the branch should be merged into the trunk, a &lt;a href=&#34;#DefinitionTag&#34;&gt;tag&lt;/a&gt; (snapshot) should be created if necessary, and changes should be published to production.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Code testing procedures&lt;/h4&gt;
&lt;p&gt;Testing of code occurs during the development process on the development server, as well as by users on the staging server.&lt;/p&gt;
&lt;p&gt;For code that is part of a project, the specific testing needs should be determined based upon the wireframe and requirements guide, and on previously reported bugs, when applicable. Even if initial testing has already been performed, each test should touch upon the already tested functionality to insure future changes have not changed other aspects of the code.&lt;/p&gt;
&lt;p&gt;To aid in this, breaking changes up by function should be a key goal of development.&lt;/p&gt;
&lt;h4&gt;Version control usage&lt;/h4&gt;
&lt;h5&gt;Version control system and tools to be used&lt;/h5&gt;
&lt;p&gt;Based on our environment and requirements, Subversion is to be used as the core version control system. All tools used must operate with Subversion without decreasing the level of security of the system. This requires that all new tools be fully vetted before being made a part of our system.&lt;/p&gt;
&lt;p&gt;At this time the allowed components are CollabNet Subversion Server and TortoiseSVN.&lt;/p&gt;
&lt;h5&gt;General repository considerations&lt;/h5&gt;
&lt;p&gt;Repositories should be treated as separate products. Generally this means that completely distinct Web applications should be stored in their own repositories. On the other hand, if there&amp;rsquo;s a need to tie changes made to one project to another, the projects should be in the same repository. If in doubt, projects should be stored within the same repository, and user access should be setup as needed.&lt;/p&gt;
&lt;h5&gt;Submitting commits&lt;/h5&gt;
&lt;p&gt;Ultimately the purpose of version control is to make it easy to roll back changes to systems, as well as to track changes so that they can all be tied together as one larger change.&lt;/p&gt;
&lt;p&gt;Since experimentation is an essential part of development, it is important that all changes be put under version control as soon as possible, and that they contain detailed, but concise notes, leaning towards too much data as opposed to too little.&lt;/p&gt;
&lt;p&gt;For purposes of our usage, functional code should &lt;em&gt;always&lt;/em&gt; be checked into version control as soon as possible, which realistically means immediately after it has been tested at a basic level. If changes depend upon each other (for example, a table change impacting procedures that update it) these changes should be checked in at the same time, as a single update, in order to minimize breaking changes.&lt;/p&gt;
&lt;p&gt;Additionally, a branch should be created for purely experimental pieces of functionality. Generally, unless the code can be lost without harm, code should be placed into version control.&lt;/p&gt;
&lt;h5&gt;System setups&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;Specifics will be determined once a server is available for installation of Subversion and testing can begin.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Generally, a single Windows server will be used for Subversion, which will run on top of Apache, on a port other than 80 (allowing for IIS to continue running on the server). Generally this means a port in the 8000s.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Apache will be setup so that all access is logged, and so that only those individuals absolutely required access to the repositories will have access. Each individual will have their own account and password, and these same users will have tools installed to their machines to allow access to these repositories.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Scheduled tasks will be setup to perform normal maintenance on the repositories, including daily backups of all repositories.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;On a regular basic, new versions of server and client tools are to be checked for, and as needed, tested and installed.&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;System maintenance&lt;/h5&gt;
&lt;p&gt;Because of the importance of version control, regular maintenance should be performed on both the core systems as well as individual developer&amp;rsquo;s machines. This maintenance includes regular backups and upgrades to relevant software.&lt;/p&gt;
&lt;p&gt;Backups are to be tested on at least a monthly basis to insure the repositories can be recreated if necessary. They should also be stored on a different system, as well as potentially in a different physical location.&lt;/p&gt;
&lt;p&gt;Upgrades to relevant software should be tested before being rolled out. Testing can include the migration of a copy of the repository to an environment with the new software, if needed.&lt;/p&gt;
&lt;h4&gt;Bug collection and fixing&lt;/h4&gt;
&lt;h5&gt;General considerations&lt;/h5&gt;
&lt;p&gt;In general, bugs concerning the data should be the primary concern, with display being secondary.&lt;/p&gt;
&lt;p&gt;Bugs that are obviously bugs should be fixed as soon as possible, but should still be tested on development and staging. If in doubt, especially as concerns &amp;lsquo;display bugs,&amp;rsquo; issues should be reported back to the development team for analysis and prioritization.&lt;/p&gt;
&lt;h5&gt;Bugs in production code&lt;/h5&gt;
&lt;p&gt;With the exception of user-added content, bugs in production code should be solved and tested in development before being moved to production. If needed, the code or data should be removed completely, instead of pushing into place a hasty revision.&lt;/p&gt;
&lt;p&gt;With the exception of bugs resulting from still-active projects, the normal process of reporting bugs should be used.&lt;/p&gt;
&lt;p&gt;Often, for issues of a small scope, such as minor changes to display (padding), full testing on staging can be skipped, but should still be pushed to staging.&lt;/p&gt;
&lt;h5&gt;Bugs arising from development&lt;/h5&gt;
&lt;p&gt;As new functionality is created, or existing functionality is updated, the possibility of bugs being introduced is high.&lt;/p&gt;
&lt;p&gt;Since all user testing is performed against a staging server, users will never test against a currently-in-development version of code, but will instead test against ready-for-production code.&lt;/p&gt;
&lt;p&gt;Because of this, all bugs during development will be reported to a single source. That individual will collect all reported bugs and generally categorize them into a few basic categories, including whether the bug is with functionality or display (if determinable) and priority. The categorized listing of bugs will be reported back to a larger group for analysis and final prioritization.&lt;/p&gt;
&lt;p&gt;Assuming there is a collection of bugs, and they are to be fixed before the changes are pushed to production, these issues will be fixed on the development server, an initial round of testing will be performed, and the changes will be pushed back to the staging server for another round of testing.&lt;/p&gt;
&lt;p&gt;This process is to repeat until such a time when all bugs are fixed and no additional bugs are reported, or it is determined that the reported bugs will be fixed in the next version of the code.&lt;/p&gt;
&lt;h4&gt;Finalizing code and pushing to production&lt;/h4&gt;
&lt;p&gt;Once new code has gone through the necessary rounds of testing on the development and staging servers, and all bugs have been resolved or otherwise tabled for later resolution, a date should be set for pushing the changes to production.&lt;/p&gt;
&lt;p&gt;Once the go-live date is reached, the branch initially created for development should be merged. If any changes need to be made because of this merge, they should be made, and if needed, additional testing on the development and staging server should be performed before the code is published to production.&lt;/p&gt;
&lt;p&gt;Generally if more than one production server is involved, code should be pushed to one server at a time. Additionally, data should be pushed before any code that works on that data.&lt;/p&gt;
&lt;h4&gt;Terminology&lt;/h4&gt;
&lt;h5&gt;&lt;a name=&#34;DefinitionBranch&#34;&gt;&lt;/a&gt;Branch&lt;/h5&gt;
&lt;p&gt;In source control, a branch can be considered as &amp;ldquo;a line of development that exists independently of another line, yet still shares a common history if you look far enough back in time. A branch always begins life as a copy of something, and moves on from there, generating its own history.&amp;rdquo; [&lt;a rel=&#34;external&#34; href=&#34;http://svnbook.red-bean.com/en/1.5/svn.branchmerge.whatis.html&#34;&gt;Source&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Typically the life-span of a branch is relatively short, as branches are generally merged back into the trunk, or core code, once the code developed within it is final.&lt;/p&gt;
&lt;h5&gt;Repository&lt;/h5&gt;
&lt;p&gt;In source control, a repository is &amp;ldquo;a central store of data. The repository stores information in the form of a filesystem tree&amp;mdash;a typical hierarchy of files and directories. Any number of clients connect to the repository, and then read or write to these files. By writing data, a client makes the information available to others; by reading data, the client receives information from others.&amp;rdquo; [&lt;a rel=&#34;external&#34; href=&#34;http://svnbook.red-bean.com/en/1.5/svn.basic.repository.html&#34;&gt;Source&lt;/a&gt;]&lt;/p&gt;
&lt;h5&gt;&lt;a name=&#34;DefinitionTag&#34;&gt;&lt;/a&gt;Tag&lt;/h5&gt;
&lt;p&gt;In source control, a tag is &amp;ldquo;just a &amp;ldquo;snapshot&amp;rdquo; of a project in time.&amp;rdquo; [&lt;a rel=&#34;external&#34; href=&#34;http://svnbook.red-bean.com/en/1.5/svn.branchmerge.tags.html&#34;&gt;Source&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Most source control systems have built-in revisions. In Subversion, whenever code is committed the revision number is increased by 1, and allows one to refer to the state of all code at that time. Tags allow you to refer to a particular revision not by number (revision 514), but rather by name (Internal_ad_rotation_1).&lt;/p&gt;
&lt;h4&gt;Revision history&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;January 28, 2010&lt;/strong&gt; &amp;ndash; James Skemp: Guidelines started&lt;br /&gt;&lt;strong&gt;February 10, 2010&lt;/strong&gt; &amp;ndash; James Skemp: Guidelines updated and expanded with initial feedback&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What I&#39;d like to see in 201X in regard to browsers</title>
      <link>http://words.strivinglife.com/post/What-Id-like-to-see-in-201X-in-regard-to-browsers/</link>
      <pubDate>Wed, 09 Dec 2009 10:30:00 -0600</pubDate>
      
      <guid>http://words.strivinglife.com/post/What-Id-like-to-see-in-201X-in-regard-to-browsers/</guid>
      <description>&lt;p&gt;&lt;h3&gt;Situation 1: WebKit&lt;/h3&gt;
&lt;p&gt;Microsoft drops all active development on Internet Explorer 9. Instead, they throw their full support (development team)&amp;nbsp;behind WebKit.&lt;/p&gt;
&lt;p&gt;Apple, with Safari, and Google, with Chrome, are already behind WebKit. Apple&amp;rsquo;s implementation on Windows, via Safari for Windows, is shoddy at best, and Google&amp;rsquo;s Chrome is a completely slimmed down version. By getting Microsoft&amp;rsquo;s support behind the engine you have an experienced team that has already developed for Windows.&lt;/p&gt;
&lt;p&gt;You also have three operating systems covered (Microsoft = Windows, Apple = Mac, and Google ~= Linux), suggesting that users of these systems will have a great experience with the WebKit implementation.&lt;/p&gt;
&lt;p&gt;This leaves Mozilla Firefox and Opera out of the mix, but Opera&amp;rsquo;s team has the mobile browser understood, and could bring that to the table, while Mozilla would have extension experience (not that the experience is all that great, but &amp;hellip;). Either way, the only thing that seems to tie Mozilla together is Google&amp;rsquo;s money, and if Google were to withdraw that support, and WebKit were to support extensions as Firefox does, Mozilla/Firefox may experience a peaceful end.&lt;/p&gt;
&lt;h3&gt;Situtation 2: Standards&lt;/h3&gt;
&lt;p&gt;Alternatively, perhaps this decade we can see standards being agreed upon, in particular as the HTML 5 &amp;lsquo;release&amp;rsquo; approaches.&lt;/p&gt;
&lt;p&gt;While they&amp;rsquo;re at it, they may as well join together on the common cause of making the Web a safer place, and together build safe browsers (even if they each have their own).&lt;/p&gt;
&lt;h3&gt;What will really happen?&lt;/h3&gt;
&lt;p&gt;Unfortunately, while I&amp;rsquo;m hopeful enough to have these &amp;hellip; hopes, a decade just doesn&amp;rsquo;t seem long enough for either of these situations to actually occur.&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Steps to setting up a Windows Server 2003 Web Server on VirtualBox</title>
      <link>http://words.strivinglife.com/post/Steps-to-setting-up-a-Windows-Server-2003-Web-Server-on-VirtualBox/</link>
      <pubDate>Sat, 24 Oct 2009 15:45:00 -0500</pubDate>
      
      <guid>http://words.strivinglife.com/post/Steps-to-setting-up-a-Windows-Server-2003-Web-Server-on-VirtualBox/</guid>
      <description>&lt;p&gt;The following goes through the steps needed to setup&amp;nbsp;Windows Server 2003, with Web server capabilities (IIS 6 in this instance), on a Sun VirtualBox virtual machine.&lt;/p&gt;
&lt;p&gt;Why Windows Server 2003 when Server 2008 is out and available? Because a large number of hosts (mine included) haven&#39;t made the switch yet.&lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a rel=&#34;external&#34; href=&#34;http://www.virtualbox.org/&#34;&gt;Sun VirtualBox&lt;/a&gt;. We want this in particular for the great networking functionality, but other apps, like Microsoft Virtual PC, will work fine as well. I used version 3.0.8 r53138 on Windows 7 Home Premium&amp;nbsp;64-bit for this guide.&lt;/li&gt;
&lt;li&gt;A copy of Windows Server 2003. In my case, I picked up a copy of &lt;a rel=&#34;external&#34; href=&#34;http://www.amazon.com/gp/product/B000WM3L3O?tag=strivinglifen-20&#34;&gt;Visual Studio 2008 Professional with MSDN Professional&lt;/a&gt;, which gives access to a large number of Windows Operating Systems and tools. Microsoft offers a number of &lt;a rel=&#34;external&#34; href=&#34;http://msdn.microsoft.com/en-us/subscriptions/subscriptionschart.aspx&#34;&gt;subscription options&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A computer that with a good amount of RAM and processor. The machine I used for this guide has 4 GB of RAM and a 2.20 GHz processor.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;VirtualBox setup&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Install VirtualBox, making sure that you install any network adapters VirtualBox may need.&lt;/li&gt;
&lt;li&gt;Create a new virtual machine.&lt;ol&gt;
&lt;li&gt;Give the virtual machine a good name, such as &lt;em&gt;Windows Server 2003 - Web Server 1&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Select Microsoft Windows - Windows 2003 as the operating system and version.&lt;/li&gt;
&lt;li&gt;Feel free to bump up the base memory size, but if looking to mimic an external server, try to use it&#39;s specs. I typically stick to the default of 256 MB.&lt;/li&gt;
&lt;li&gt;Create a new hard disk, of the type Dynamically expanding storage; this allows you to create a large disk, but only have it take up the space it needs.&lt;/li&gt;
&lt;li&gt;Give the disk a good amount of space; I generally change from the default of 20 GB to 50 GB, since it&#39;s not easy to increase this later, but you&#39;ll typically never go above 10 GB anyway.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Change the Network Adapter from the default of NAT to Bridged Adapter. This will allow you to reach both the Internet and your internal network.&lt;/li&gt;
&lt;li&gt;With the machine setup, you&#39;ll want to verify that your Windows Server 2003 installation media is available. If using MSDN, that means adding your downloaded ISO to the Virtual Media Manager (FIle &amp;gt; Virtual Media Manager)&amp;nbsp;under CD/DVD Images.&lt;/li&gt;
&lt;li&gt;Start the machine, attaching the ISO when prompted.&lt;ol&gt;
&lt;li&gt;Generally the defaults are acceptable.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;General Windows Server 2003 setup&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Once Windows Server 2003 is installed, install the guest additions (Devices &amp;gt; Install Guest Additions); it&#39;ll save you a deal of time.&lt;/li&gt;
&lt;li&gt;Update Windows Server 2003 as needed.&lt;ol&gt;
&lt;li&gt;In particular, I like to download the &lt;a rel=&#34;external&#34; href=&#34;http://smallestdotnet.com/&#34;&gt;current version of ASP.NET&lt;/a&gt; and install IE 8 (although I do the latter as a separate update; I&#39;ve had issues otherwise).&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;At this point I like to exit out of the machine and clone the hard drive. I&#39;ll have activated the license and have a nice hard drive, with the current updates. If I want to create another Window Server 2003 instance, it&#39;s easier to just use a base drive and customize as needed. Your decision. (The VirtualBox (VBoxManage) command is clonehd.)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Specific Windows Server 2003 setups&lt;/h3&gt;
&lt;p&gt;With a base install ready, we can go in various ways with our installation. By default, almost no services will be up and running.&lt;/p&gt;
&lt;p&gt;In this particular instance, we just want to run IIS 6.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure you&#39;re in the Manage Your Server application. &lt;a rel=&#34;external&#34; href=&#34;http://media.jamesrskemp.com/graphics/windowsServer2003/server2003Roles_01.jpg&#34;&gt;See this&lt;/a&gt;.&lt;ol&gt;
&lt;li&gt;By default it will start automatically (a good thing) or you can find it at Start &amp;gt; All Programs &amp;gt; Administrative Tools &amp;gt; Manage Your Server.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;From the options, select &lt;strong&gt;Add or remove a role&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;We want a &lt;strong&gt;Custom configuration&lt;/strong&gt;, since we just want a Web server.&lt;/li&gt;
&lt;li&gt;For our needs, we want our&amp;nbsp;server to be an&amp;nbsp;&lt;strong&gt;Application server (IIS, ASP.NET)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;We only want to enable &lt;strong&gt;ASP.NET&lt;/strong&gt;, not FrontPage Server Extensions (unless you particularly know you want that).&lt;/li&gt;
&lt;li&gt;Our summary reads something like the following. &lt;a rel=&#34;external&#34; href=&#34;http://media.jamesrskemp.com/graphics/windowsServer2003/server2003Roles_02.jpg&#34;&gt;See this&lt;/a&gt;.&lt;ol&gt;
&lt;li&gt;Install Internet Information Services (IIS)&lt;/li&gt;
&lt;li&gt;Enable COM+ for remote transactions&lt;/li&gt;
&lt;li&gt;Enable Microsoft Distrubuted Transaction Coordinator (DTC) for remote access&lt;/li&gt;
&lt;li&gt;Enable ASP.NET&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;You may be prompted to insert a CD, at which point you&#39;ll want to mount CD 1 of the R2 discs, and not CD 2. You can play around with this as needed.&lt;/li&gt;
&lt;li&gt;Shortly, you see that &#34;This server is Now an Application server.&#34; Included on this page is a link to view additional steps to secure the server. &lt;a rel=&#34;external&#34; href=&#34;http://media.jamesrskemp.com/graphics/windowsServer2003/server2003Roles_03.jpg&#34;&gt;See this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You should now see that the Application Server role is now available to be managed. &lt;a rel=&#34;external&#34; href=&#34;http://media.jamesrskemp.com/graphics/windowsServer2003/server2003Roles_04.jpg&#34;&gt;See this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Opening a browser and calling &lt;a rel=&#34;nofollow&#34; href=&#34;http://localhost/&#34;&gt;http://localhost/&lt;/a&gt; should now display the standard Under Construction page.&lt;/li&gt;
&lt;li&gt;Go to Windows Update and install any needed updates.&lt;/li&gt;
&lt;li&gt;Assuming you&#39;ve setup a Bridged Adapter in Network for the virtual machine, you should now be able to browse to the virtual instance in your host machine. You can use both the IP as well as the server name. For example, &lt;a rel=&#34;nofollow&#34; href=&#34;http://james-wins03ws1/&#34;&gt;http://james-wins03ws1/&lt;/a&gt;&amp;nbsp;or &lt;a rel=&#34;nofollow&#34; href=&#34;http://192.168.1.106/&#34;&gt;http://192.168.1.106/&lt;/a&gt;.&lt;ol&gt;
&lt;li&gt;This can be found by opening a command prompt (cmd) and running &lt;strong&gt;ipconfig /all&lt;/strong&gt; and finding the IP Address.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;At this point you&#39;ve successfully setup IIS running on Windows Server 2003, in a virtual machine, and are able to connect to it from your host machine.&lt;/p&gt;
&lt;p&gt;You can now mimic a real machine as much as you&#39;d like, for example by setting up FTP (&lt;a rel=&#34;external&#34; href=&#34;http://filezilla-project.org/&#34;&gt;FileZilla Server&lt;/a&gt;)&amp;nbsp;to move files between the machines.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;I recommend just using VirtualBox to move files between the two; Devices &amp;gt; Shared Folders will let you setup temporary and permanent folders.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Questions, comments, and suggestions are appreciated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Browser environments for testing</title>
      <link>http://words.strivinglife.com/post/Browser-environments-for-testing/</link>
      <pubDate>Thu, 20 Nov 2008 22:40:00 -0600</pubDate>
      
      <guid>http://words.strivinglife.com/post/Browser-environments-for-testing/</guid>
      <description>&lt;p&gt;
In &lt;a href=&#34;http://words.strivinglife.com/words/post/How-to-really-compact-Virtual-PC-hard-drives.aspx&#34;&gt;a previous post&lt;/a&gt; I mentioned using virtual machines for testing.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the three virtual machines that I feel cover the most options for browser testing (on Windows):&amp;nbsp;
&lt;/p&gt;
&lt;h3&gt;Current versions&lt;/h3&gt;
&lt;p&gt;
Looking at the top 10 browsers for this site, using data from Google Analytics, we have; Internet Explorer, Firefox, Safari, Chrome, Mozilla, Opera, Playstation 3, Konqueror, SeaMonkey, and Camino.
&lt;/p&gt;
&lt;p&gt;
Of those, Internet Explorer and Firefox, obviously, account for the largest amount of traffic, at about 86% of all visits. Safari is a respectable 6.6%, Chrome at about 2.7%, Mozilla at 2.1%, and Opera at 1.8%.
&lt;/p&gt;
&lt;p&gt;
Some&amp;nbsp;may think&amp;nbsp;I&amp;#39;m a bit&amp;nbsp;off, but I&amp;nbsp;consider Opera a fairly good browser, while Mozilla doesn&amp;#39;t much concern me. So, that gives us our top five browsers, all of which&amp;nbsp;can&amp;nbsp;be installed on Windows.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
So, any&amp;nbsp;test&amp;nbsp;environment for current versions of browsers (on Windows), should include the following (in order of importance).
&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;
    &lt;div&gt;
    Internet Explorer 7
    &lt;/div&gt;
    &lt;/li&gt;
    &lt;li&gt;
    &lt;div&gt;
    Firefox 3
    &lt;/div&gt;
    &lt;/li&gt;
    &lt;li&gt;
    &lt;div&gt;
    Safari 3
    &lt;/div&gt;
    &lt;/li&gt;
    &lt;li&gt;
    &lt;div&gt;
    Chrome 0
    &lt;/div&gt;
    &lt;/li&gt;
    &lt;li&gt;
    &lt;div&gt;
    Opera 9
    &lt;/div&gt;
    &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
There&amp;#39;s talk that Chrome may replace Firefox, if Google stops supporting Mozilla, so while Chrome may have low usage numbers, it&amp;#39;s fairly standards-compliant.
&lt;/p&gt;
&lt;p&gt;
This is also why I feel that not including Opera would be a very big mistake.
&lt;/p&gt;
&lt;p&gt;
This rounds out our first virtual machine to 5 unique browsers.
&lt;/p&gt;
&lt;h3&gt;Previous versions&amp;nbsp;&lt;/h3&gt;
&lt;p&gt;
While it would be great if it wasn&amp;#39;t the case, you&amp;#39;ll always need to support older versions of popular browsers.
&lt;/p&gt;
&lt;p&gt;
Again, looking at Google Analytics for this site, almost 25% of Internet Explorer users are using version 6. Firefox, which supposedly has some issues in version 3, that are keeping users back in version 2, is about the same, with 75% of users on version 3.0.3 or 3.0.4 (I suppose there may be some overlap there).
&lt;/p&gt;
&lt;p&gt;
Most other browsers don&amp;#39;t actively support so many previous versions, which means that a virtual environment for past versions of browsers can stick with the following.
&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;
    &lt;div&gt;
    Internet Explorer 6
    &lt;/div&gt;
    &lt;/li&gt;
    &lt;li&gt;
    &lt;div&gt;
    Firefox 2
    &lt;/div&gt;
    &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Upcoming versions&lt;/h3&gt;
&lt;p&gt;
This virtual machine is really focused on browsers currently in beta, or that may otherwise not be in the top listing.
&lt;/p&gt;
&lt;p&gt;
Primarily, that means the following should almost certainly be included.
&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;
    &lt;div&gt;
    Internet Explorer 8
    &lt;/div&gt;
    &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
That&amp;#39;s right, Internet Explorer 8. That&amp;#39;s all I&amp;#39;d absolutely need, especially looking at stats.
&lt;/p&gt;
&lt;p&gt;
However, to a great extent, Chrome, like most of Google&amp;#39;s other &lt;strike&gt;products&lt;/strike&gt; applications is truly a beta browser (and one that I&amp;#39;ve had numerous issues with, probably due to that fact) and that might suggest that it should truly be installed in this environment.
&lt;/p&gt;
&lt;h3&gt;What about Linux and Mac?&amp;nbsp;&lt;/h3&gt;
&lt;p&gt;
The top browsers for Linux, again according to this site, are Firefox and Mozilla, which should&amp;nbsp;function the same as they are on Windows (and, again, I consider Firefox and Mozilla to be basically the same). It&amp;#39;s extremely easy, and free, to get started with any number of Linux environments, but I just don&amp;#39;t know that it makes all that much sense. (Keep reading for the clarification of this statement.)
&lt;/p&gt;
&lt;p&gt;
For Mac&amp;nbsp;we have Safari and Firefox. The latter should be very similar to the Windows version.
&lt;/p&gt;
&lt;p&gt;
For Safari Apple was kind enough to give Windows users this browser. As to whether it&amp;#39;s the same as the Mac version, well, it looks very similar. But, unless you&amp;#39;re willing to pay the Apple premium, the Windows version should suffice.
&lt;/p&gt;
&lt;p&gt;
For these reasons, basic Web development doesn&amp;#39;t need to dive too deep into Linux and Mac environments.&lt;sup&gt;1&lt;/sup&gt;
&lt;/p&gt;
&lt;h3&gt;Mobile browsers?&lt;/h3&gt;
&lt;p&gt;
But what about browsers on mobile devices?
&lt;/p&gt;
&lt;p&gt;
Both Safari, Opera, and Internet Explorer have mobile versions available (in the case of Opera, they have two), which will definitely change the output of your site.
&lt;/p&gt;
&lt;p&gt;
To some extent &lt;a href=&#34;http://words.strivinglife.com/lynx/&#34;&gt;Lynx&lt;/a&gt; fills this hole by providing a text version of your site, and therefore might make sense installed on a virtual machine.
&lt;/p&gt;
&lt;p&gt;
The standard Opera browser also provides a mobile-like &amp;#39;emulator&amp;#39; for your site, by way of the Small View functionality.
&lt;/p&gt;
&lt;p&gt;
However, for the mobile version of Internet Explorer (which won&amp;#39;t be tracked by Analytics, as it doesn&amp;#39;t support JavaScript (speaking of Windows Mobile 6)) accessing an emulator is not quite as easy.
&lt;/p&gt;
&lt;p&gt;
As to the solution, I can&amp;#39;t say I can provide one, but as we move more and more towards mobile devices, perhaps we&amp;#39;ll be virtualization for these environments much more readily available.
&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;
Above I&amp;#39;ve suggested three virtual environments, for Web site development. For the majority of projects, I think having current versions of the top three browsers - Internet Explorer, Firefox, and Safari - would be quite enough.
&lt;/p&gt;
&lt;p&gt;
What do you think? What do you develop for?
&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;
1. Of course, I realize that if you were going to create&amp;nbsp;a Flash or Silverlight application, you&amp;#39;d naturally want to test on both Mac and Linux (or if your app becomes popular, you&amp;#39;ll get some backlash on Slashdot). At that point what you&amp;#39;re really testing is the environment, and not just the browser. But, for the &amp;#39;majority&amp;#39; of Web sites, I personally feel that virtual Mac and Linux environments are unnecessary. Compare this to my feelings a number of years ago, &lt;a href=&#34;http://words.strivinglife.com/words/post/Four-working-browsers-(at-least).aspx&#34;&gt;before Safari was available for Windows&lt;/a&gt;, and you&amp;#39;d see a different view.&lt;sup&gt;2&lt;/sup&gt;
&lt;/p&gt;
&lt;p&gt;
2. I also recommended Lynx and Netscape in that post, but no longer see that as necessary, entirely.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>